"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SecretBackend:
    r"""
    SecretBackend is the Schema for the SecretBackends API. Creates an AWS secret backend for Vault.

    Attributes
    ----------
    apiVersion : str, default is "aws.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SecretBackend", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AwsVaultUpboundIoV1alpha1SecretBackendSpec, default is Undefined, required
        spec
    status : AwsVaultUpboundIoV1alpha1SecretBackendStatus, default is Undefined, optional
        status
    """


    apiVersion: "aws.vault.upbound.io/v1alpha1" = "aws.vault.upbound.io/v1alpha1"

    kind: "SecretBackend" = "SecretBackend"

    metadata?: v1.ObjectMeta

    spec: AwsVaultUpboundIoV1alpha1SecretBackendSpec

    status?: AwsVaultUpboundIoV1alpha1SecretBackendStatus


schema AwsVaultUpboundIoV1alpha1SecretBackendSpec:
    r"""
    SecretBackendSpec defines the desired state of SecretBackend

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AwsVaultUpboundIoV1alpha1SecretBackendSpecForProvider, default is Undefined, required
        for provider
    initProvider : AwsVaultUpboundIoV1alpha1SecretBackendSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AwsVaultUpboundIoV1alpha1SecretBackendSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AwsVaultUpboundIoV1alpha1SecretBackendSpecForProvider

    initProvider?: AwsVaultUpboundIoV1alpha1SecretBackendSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRef

    providerRef?: AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderRef

    publishConnectionDetailsTo?: AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AwsVaultUpboundIoV1alpha1SecretBackendSpecWriteConnectionSecretToRef


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecForProvider:
    r"""
    aws vault upbound io v1alpha1 secret backend spec for provider

    Attributes
    ----------
    accessKeySecretRef : AwsVaultUpboundIoV1alpha1SecretBackendSpecForProviderAccessKeySecretRef, default is Undefined, optional
        access key secret ref
    defaultLeaseTtlSeconds : float, default is Undefined, optional
        The default TTL for credentials issued by this backend. Default lease duration for secrets in seconds
    description : str, default is Undefined, optional
        A human-friendly description for this backend. Human-friendly description of the mount for the backend.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    iamEndpoint : str, default is Undefined, optional
        Specifies a custom HTTP IAM endpoint to use. Specifies a custom HTTP IAM endpoint to use.
    identityTokenAudience : str, default is Undefined, optional
        The audience claim value. Requires Vault 1.16+. The audience claim value.
    identityTokenKey : str, default is Undefined, optional
        The key to use for signing identity tokens. Requires Vault 1.16+. The key to use for signing identity tokens.
    identityTokenTtl : float, default is Undefined, optional
        The TTL of generated identity tokens in seconds. Requires Vault 1.16+. The TTL of generated identity tokens in seconds.
    local : bool, default is Undefined, optional
        Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas. Specifies if the secret backend is local only
    maxLeaseTtlSeconds : float, default is Undefined, optional
        The maximum TTL that can be requested for credentials issued by this backend. Maximum possible lease duration for secrets in seconds
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    path : str, default is Undefined, optional
        The unique path this backend should be mounted at. Must not begin or end with a /. Defaults to aws. Path to mount the backend at.
    region : str, default is Undefined, optional
        The AWS region for API calls. Defaults to us-east-1. The AWS region to make API calls against. Defaults to us-east-1.
    roleArn : str, default is Undefined, optional
        Role ARN to assume for plugin identity token federation. Requires Vault 1.16+. Role ARN to assume for plugin identity token federation.
    secretKeySecretRef : AwsVaultUpboundIoV1alpha1SecretBackendSpecForProviderSecretKeySecretRef, default is Undefined, optional
        secret key secret ref
    stsEndpoint : str, default is Undefined, optional
        Specifies a custom HTTP STS endpoint to use. Specifies a custom HTTP STS endpoint to use.
    usernameTemplate : str, default is Undefined, optional
        Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template: Template describing how dynamic usernames are generated.
    """


    accessKeySecretRef?: AwsVaultUpboundIoV1alpha1SecretBackendSpecForProviderAccessKeySecretRef

    defaultLeaseTtlSeconds?: float

    description?: str

    disableRemount?: bool

    iamEndpoint?: str

    identityTokenAudience?: str

    identityTokenKey?: str

    identityTokenTtl?: float

    local?: bool

    maxLeaseTtlSeconds?: float

    namespace?: str

    path?: str

    region?: str

    roleArn?: str

    secretKeySecretRef?: AwsVaultUpboundIoV1alpha1SecretBackendSpecForProviderSecretKeySecretRef

    stsEndpoint?: str

    usernameTemplate?: str


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecForProviderAccessKeySecretRef:
    r"""
    The AWS Access Key ID this backend should use to issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials. The AWS Access Key ID to use when generating new credentials.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecForProviderSecretKeySecretRef:
    r"""
    The AWS Secret Key this backend should use to issue new credentials. Vault uses the official AWS SDK to authenticate, and thus can also use standard AWS environment credentials, shared file credentials or IAM role/ECS task credentials. The AWS Secret Access Key to use when generating new credentials.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    defaultLeaseTtlSeconds : float, default is Undefined, optional
        The default TTL for credentials issued by this backend. Default lease duration for secrets in seconds
    description : str, default is Undefined, optional
        A human-friendly description for this backend. Human-friendly description of the mount for the backend.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    iamEndpoint : str, default is Undefined, optional
        Specifies a custom HTTP IAM endpoint to use. Specifies a custom HTTP IAM endpoint to use.
    identityTokenAudience : str, default is Undefined, optional
        The audience claim value. Requires Vault 1.16+. The audience claim value.
    identityTokenKey : str, default is Undefined, optional
        The key to use for signing identity tokens. Requires Vault 1.16+. The key to use for signing identity tokens.
    identityTokenTtl : float, default is Undefined, optional
        The TTL of generated identity tokens in seconds. Requires Vault 1.16+. The TTL of generated identity tokens in seconds.
    local : bool, default is Undefined, optional
        Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas. Specifies if the secret backend is local only
    maxLeaseTtlSeconds : float, default is Undefined, optional
        The maximum TTL that can be requested for credentials issued by this backend. Maximum possible lease duration for secrets in seconds
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    path : str, default is Undefined, optional
        The unique path this backend should be mounted at. Must not begin or end with a /. Defaults to aws. Path to mount the backend at.
    region : str, default is Undefined, optional
        The AWS region for API calls. Defaults to us-east-1. The AWS region to make API calls against. Defaults to us-east-1.
    roleArn : str, default is Undefined, optional
        Role ARN to assume for plugin identity token federation. Requires Vault 1.16+. Role ARN to assume for plugin identity token federation.
    stsEndpoint : str, default is Undefined, optional
        Specifies a custom HTTP STS endpoint to use. Specifies a custom HTTP STS endpoint to use.
    usernameTemplate : str, default is Undefined, optional
        Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template: Template describing how dynamic usernames are generated.
    """


    defaultLeaseTtlSeconds?: float

    description?: str

    disableRemount?: bool

    iamEndpoint?: str

    identityTokenAudience?: str

    identityTokenKey?: str

    identityTokenTtl?: float

    local?: bool

    maxLeaseTtlSeconds?: float

    namespace?: str

    path?: str

    region?: str

    roleArn?: str

    stsEndpoint?: str

    usernameTemplate?: str


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRefPolicy


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderRefPolicy


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRef

    metadata?: AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToMetadata

    name: str


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRefPolicy


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AwsVaultUpboundIoV1alpha1SecretBackendSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AwsVaultUpboundIoV1alpha1SecretBackendStatus:
    r"""
    SecretBackendStatus defines the observed state of SecretBackend.

    Attributes
    ----------
    atProvider : AwsVaultUpboundIoV1alpha1SecretBackendStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AwsVaultUpboundIoV1alpha1SecretBackendStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: AwsVaultUpboundIoV1alpha1SecretBackendStatusAtProvider

    conditions?: [AwsVaultUpboundIoV1alpha1SecretBackendStatusConditionsItems0]


schema AwsVaultUpboundIoV1alpha1SecretBackendStatusAtProvider:
    r"""
    aws vault upbound io v1alpha1 secret backend status at provider

    Attributes
    ----------
    defaultLeaseTtlSeconds : float, default is Undefined, optional
        The default TTL for credentials issued by this backend. Default lease duration for secrets in seconds
    description : str, default is Undefined, optional
        A human-friendly description for this backend. Human-friendly description of the mount for the backend.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    iamEndpoint : str, default is Undefined, optional
        Specifies a custom HTTP IAM endpoint to use. Specifies a custom HTTP IAM endpoint to use.
    id : str, default is Undefined, optional
        id
    identityTokenAudience : str, default is Undefined, optional
        The audience claim value. Requires Vault 1.16+. The audience claim value.
    identityTokenKey : str, default is Undefined, optional
        The key to use for signing identity tokens. Requires Vault 1.16+. The key to use for signing identity tokens.
    identityTokenTtl : float, default is Undefined, optional
        The TTL of generated identity tokens in seconds. Requires Vault 1.16+. The TTL of generated identity tokens in seconds.
    local : bool, default is Undefined, optional
        Specifies whether the secrets mount will be marked as local. Local mounts are not replicated to performance replicas. Specifies if the secret backend is local only
    maxLeaseTtlSeconds : float, default is Undefined, optional
        The maximum TTL that can be requested for credentials issued by this backend. Maximum possible lease duration for secrets in seconds
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    path : str, default is Undefined, optional
        The unique path this backend should be mounted at. Must not begin or end with a /. Defaults to aws. Path to mount the backend at.
    region : str, default is Undefined, optional
        The AWS region for API calls. Defaults to us-east-1. The AWS region to make API calls against. Defaults to us-east-1.
    roleArn : str, default is Undefined, optional
        Role ARN to assume for plugin identity token federation. Requires Vault 1.16+. Role ARN to assume for plugin identity token federation.
    stsEndpoint : str, default is Undefined, optional
        Specifies a custom HTTP STS endpoint to use. Specifies a custom HTTP STS endpoint to use.
    usernameTemplate : str, default is Undefined, optional
        Template describing how dynamic usernames are generated. The username template is used to generate both IAM usernames (capped at 64 characters) and STS usernames (capped at 32 characters). If no template is provided the field defaults to the template: Template describing how dynamic usernames are generated.
    """


    defaultLeaseTtlSeconds?: float

    description?: str

    disableRemount?: bool

    iamEndpoint?: str

    id?: str

    identityTokenAudience?: str

    identityTokenKey?: str

    identityTokenTtl?: float

    local?: bool

    maxLeaseTtlSeconds?: float

    namespace?: str

    path?: str

    region?: str

    roleArn?: str

    stsEndpoint?: str

    usernameTemplate?: str


schema AwsVaultUpboundIoV1alpha1SecretBackendStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


