"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema AuthBackendRole:
    r"""
    AuthBackendRole is the Schema for the AuthBackendRoles API. Manages AWS auth backend roles in Vault.

    Attributes
    ----------
    apiVersion : str, default is "aws.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "AuthBackendRole", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpec, default is Undefined, required
        spec
    status : AwsVaultUpboundIoV1alpha1AuthBackendRoleStatus, default is Undefined, optional
        status
    """


    apiVersion: "aws.vault.upbound.io/v1alpha1" = "aws.vault.upbound.io/v1alpha1"

    kind: "AuthBackendRole" = "AuthBackendRole"

    metadata?: v1.ObjectMeta

    spec: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpec

    status?: AwsVaultUpboundIoV1alpha1AuthBackendRoleStatus


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpec:
    r"""
    AuthBackendRoleSpec defines the desired state of AuthBackendRole

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecForProvider, default is Undefined, required
        for provider
    initProvider : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecForProvider

    initProvider?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRef

    providerRef?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRef

    publishConnectionDetailsTo?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecWriteConnectionSecretToRef


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecForProvider:
    r"""
    aws vault upbound io v1alpha1 auth backend role spec for provider

    Attributes
    ----------
    allowInstanceMigration : bool, default is Undefined, optional
        If set to true, allows migration of the underlying instance where the client resides. When true, allows migration of the underlying instance where the client resides. Use with caution.
    authType : str, default is Undefined, optional
        The auth type permitted for this role. Valid choices are ec2 and iam. Defaults to iam. The auth type permitted for this role.
    backend : str, default is Undefined, optional
        Path to the mounted aws auth backend. Unique name of the auth backend to configure.
    boundAccountIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the account ID specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances with this account ID in their identity document will be permitted to log in.
    boundAmiIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the AMI ID specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances using this AMI ID will be permitted to log in.
    boundEc2InstanceIds : [str], default is Undefined, optional
        Only EC2 instances that match this instance ID will be permitted to log in.
    boundIamInstanceProfileArns : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they must be associated with an IAM instance profile ARN which has a prefix that matches the value specified by this field. The value is prefix-matched as though it were a glob ending in *. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
    boundIamPrincipalArns : [str], default is Undefined, optional
        If set, defines the IAM principal that must be authenticated when auth_type is set to iam. Wildcards are supported at the end of the ARN. The IAM principal that must be authenticated using the iam auth method.
    boundIamRoleArns : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they must match the IAM role ARN specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances that match this IAM role ARN will be permitted to log in.
    boundRegions : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that the region in their identity document must match the one specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances in this region will be permitted to log in.
    boundSubnetIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the subnet ID that matches the value specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with this subnet ID will be permitted to log in.
    boundVpcIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the VPC ID that matches the value specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with this VPC ID will be permitted to log in.
    disallowReauthentication : bool, default is Undefined, optional
        IF set to true, only allows a single token to be granted per instance ID. This can only be set when auth_type is set to ec2. When true, only allows a single token to be granted per instance ID.
    inferredAwsRegion : str, default is Undefined, optional
        When inferred_entity_type is set, this is the region to search for the inferred entities. Required if inferred_entity_type is set. This only applies when auth_type is set to iam. The region to search for the inferred entities in.
    inferredEntityType : str, default is Undefined, optional
        If set, instructs Vault to turn on inferencing. The only valid value is ec2_instance, which instructs Vault to infer that the role comes from an EC2 instance in an IAM instance profile. This only applies when auth_type is set to iam. The type of inferencing Vault should do.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    resolveAwsUniqueIds : bool, default is Undefined, optional
        Only valid when auth_type is iam. If set to true, the bound_iam_principal_arns are resolved to AWS Unique IDs for the bound principal ARN. This field is ignored when a bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more closely mimics the behavior of AWS services in that if an IAM user or role is deleted and a new one is recreated with the same name, those new users or roles won't get access to roles in Vault that were permissioned to the prior principals of the same name. Defaults to true. Once set to true, this cannot be changed to false without recreating the role. Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.
    role : str, default is Undefined, optional
        The name of the role. Name of the role.
    roleTag : str, default is Undefined, optional
        If set, enable role tags for this role. The value set for this field should be the key of the tag on the EC2 instance. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. The key of the tag on EC2 instance to use for role tags.
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    """


    allowInstanceMigration?: bool

    authType?: str

    backend?: str

    boundAccountIds?: [str]

    boundAmiIds?: [str]

    boundEc2InstanceIds?: [str]

    boundIamInstanceProfileArns?: [str]

    boundIamPrincipalArns?: [str]

    boundIamRoleArns?: [str]

    boundRegions?: [str]

    boundSubnetIds?: [str]

    boundVpcIds?: [str]

    disallowReauthentication?: bool

    inferredAwsRegion?: str

    inferredEntityType?: str

    namespace?: str

    resolveAwsUniqueIds?: bool

    role?: str

    roleTag?: str

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    allowInstanceMigration : bool, default is Undefined, optional
        If set to true, allows migration of the underlying instance where the client resides. When true, allows migration of the underlying instance where the client resides. Use with caution.
    authType : str, default is Undefined, optional
        The auth type permitted for this role. Valid choices are ec2 and iam. Defaults to iam. The auth type permitted for this role.
    backend : str, default is Undefined, optional
        Path to the mounted aws auth backend. Unique name of the auth backend to configure.
    boundAccountIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the account ID specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances with this account ID in their identity document will be permitted to log in.
    boundAmiIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the AMI ID specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances using this AMI ID will be permitted to log in.
    boundEc2InstanceIds : [str], default is Undefined, optional
        Only EC2 instances that match this instance ID will be permitted to log in.
    boundIamInstanceProfileArns : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they must be associated with an IAM instance profile ARN which has a prefix that matches the value specified by this field. The value is prefix-matched as though it were a glob ending in *. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
    boundIamPrincipalArns : [str], default is Undefined, optional
        If set, defines the IAM principal that must be authenticated when auth_type is set to iam. Wildcards are supported at the end of the ARN. The IAM principal that must be authenticated using the iam auth method.
    boundIamRoleArns : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they must match the IAM role ARN specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances that match this IAM role ARN will be permitted to log in.
    boundRegions : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that the region in their identity document must match the one specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances in this region will be permitted to log in.
    boundSubnetIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the subnet ID that matches the value specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with this subnet ID will be permitted to log in.
    boundVpcIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the VPC ID that matches the value specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with this VPC ID will be permitted to log in.
    disallowReauthentication : bool, default is Undefined, optional
        IF set to true, only allows a single token to be granted per instance ID. This can only be set when auth_type is set to ec2. When true, only allows a single token to be granted per instance ID.
    inferredAwsRegion : str, default is Undefined, optional
        When inferred_entity_type is set, this is the region to search for the inferred entities. Required if inferred_entity_type is set. This only applies when auth_type is set to iam. The region to search for the inferred entities in.
    inferredEntityType : str, default is Undefined, optional
        If set, instructs Vault to turn on inferencing. The only valid value is ec2_instance, which instructs Vault to infer that the role comes from an EC2 instance in an IAM instance profile. This only applies when auth_type is set to iam. The type of inferencing Vault should do.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    resolveAwsUniqueIds : bool, default is Undefined, optional
        Only valid when auth_type is iam. If set to true, the bound_iam_principal_arns are resolved to AWS Unique IDs for the bound principal ARN. This field is ignored when a bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more closely mimics the behavior of AWS services in that if an IAM user or role is deleted and a new one is recreated with the same name, those new users or roles won't get access to roles in Vault that were permissioned to the prior principals of the same name. Defaults to true. Once set to true, this cannot be changed to false without recreating the role. Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.
    role : str, default is Undefined, optional
        The name of the role. Name of the role.
    roleTag : str, default is Undefined, optional
        If set, enable role tags for this role. The value set for this field should be the key of the tag on the EC2 instance. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. The key of the tag on EC2 instance to use for role tags.
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    """


    allowInstanceMigration?: bool

    authType?: str

    backend?: str

    boundAccountIds?: [str]

    boundAmiIds?: [str]

    boundEc2InstanceIds?: [str]

    boundIamInstanceProfileArns?: [str]

    boundIamPrincipalArns?: [str]

    boundIamRoleArns?: [str]

    boundRegions?: [str]

    boundSubnetIds?: [str]

    boundVpcIds?: [str]

    disallowReauthentication?: bool

    inferredAwsRegion?: str

    inferredEntityType?: str

    namespace?: str

    resolveAwsUniqueIds?: bool

    role?: str

    roleTag?: str

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRefPolicy


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRefPolicy


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRef

    metadata?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToMetadata

    name: str


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleStatus:
    r"""
    AuthBackendRoleStatus defines the observed state of AuthBackendRole.

    Attributes
    ----------
    atProvider : AwsVaultUpboundIoV1alpha1AuthBackendRoleStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AwsVaultUpboundIoV1alpha1AuthBackendRoleStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: AwsVaultUpboundIoV1alpha1AuthBackendRoleStatusAtProvider

    conditions?: [AwsVaultUpboundIoV1alpha1AuthBackendRoleStatusConditionsItems0]


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleStatusAtProvider:
    r"""
    aws vault upbound io v1alpha1 auth backend role status at provider

    Attributes
    ----------
    allowInstanceMigration : bool, default is Undefined, optional
        If set to true, allows migration of the underlying instance where the client resides. When true, allows migration of the underlying instance where the client resides. Use with caution.
    authType : str, default is Undefined, optional
        The auth type permitted for this role. Valid choices are ec2 and iam. Defaults to iam. The auth type permitted for this role.
    backend : str, default is Undefined, optional
        Path to the mounted aws auth backend. Unique name of the auth backend to configure.
    boundAccountIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the account ID specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances with this account ID in their identity document will be permitted to log in.
    boundAmiIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they should be using the AMI ID specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances using this AMI ID will be permitted to log in.
    boundEc2InstanceIds : [str], default is Undefined, optional
        Only EC2 instances that match this instance ID will be permitted to log in.
    boundIamInstanceProfileArns : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they must be associated with an IAM instance profile ARN which has a prefix that matches the value specified by this field. The value is prefix-matched as though it were a glob ending in *. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
    boundIamPrincipalArns : [str], default is Undefined, optional
        If set, defines the IAM principal that must be authenticated when auth_type is set to iam. Wildcards are supported at the end of the ARN. The IAM principal that must be authenticated using the iam auth method.
    boundIamRoleArns : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they must match the IAM role ARN specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances that match this IAM role ARN will be permitted to log in.
    boundRegions : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that the region in their identity document must match the one specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances in this region will be permitted to log in.
    boundSubnetIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the subnet ID that matches the value specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with this subnet ID will be permitted to log in.
    boundVpcIds : [str], default is Undefined, optional
        If set, defines a constraint on the EC2 instances that can perform the login operation that they be associated with the VPC ID that matches the value specified by this field. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. Only EC2 instances associated with this VPC ID will be permitted to log in.
    disallowReauthentication : bool, default is Undefined, optional
        IF set to true, only allows a single token to be granted per instance ID. This can only be set when auth_type is set to ec2. When true, only allows a single token to be granted per instance ID.
    id : str, default is Undefined, optional
        id
    inferredAwsRegion : str, default is Undefined, optional
        When inferred_entity_type is set, this is the region to search for the inferred entities. Required if inferred_entity_type is set. This only applies when auth_type is set to iam. The region to search for the inferred entities in.
    inferredEntityType : str, default is Undefined, optional
        If set, instructs Vault to turn on inferencing. The only valid value is ec2_instance, which instructs Vault to infer that the role comes from an EC2 instance in an IAM instance profile. This only applies when auth_type is set to iam. The type of inferencing Vault should do.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    resolveAwsUniqueIds : bool, default is Undefined, optional
        Only valid when auth_type is iam. If set to true, the bound_iam_principal_arns are resolved to AWS Unique IDs for the bound principal ARN. This field is ignored when a bound_iam_principal_arn ends in a wildcard. Resolving to unique IDs more closely mimics the behavior of AWS services in that if an IAM user or role is deleted and a new one is recreated with the same name, those new users or roles won't get access to roles in Vault that were permissioned to the prior principals of the same name. Defaults to true. Once set to true, this cannot be changed to false without recreating the role. Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old principal had.
    role : str, default is Undefined, optional
        The name of the role. Name of the role.
    roleId : str, default is Undefined, optional
        The Vault generated role ID. The Vault generated role ID.
    roleTag : str, default is Undefined, optional
        If set, enable role tags for this role. The value set for this field should be the key of the tag on the EC2 instance. auth_type must be set to ec2 or inferred_entity_type must be set to ec2_instance to use this constraint. The key of the tag on EC2 instance to use for role tags.
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    """


    allowInstanceMigration?: bool

    authType?: str

    backend?: str

    boundAccountIds?: [str]

    boundAmiIds?: [str]

    boundEc2InstanceIds?: [str]

    boundIamInstanceProfileArns?: [str]

    boundIamPrincipalArns?: [str]

    boundIamRoleArns?: [str]

    boundRegions?: [str]

    boundSubnetIds?: [str]

    boundVpcIds?: [str]

    disallowReauthentication?: bool

    id?: str

    inferredAwsRegion?: str

    inferredEntityType?: str

    namespace?: str

    resolveAwsUniqueIds?: bool

    role?: str

    roleId?: str

    roleTag?: str

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str


schema AwsVaultUpboundIoV1alpha1AuthBackendRoleStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


