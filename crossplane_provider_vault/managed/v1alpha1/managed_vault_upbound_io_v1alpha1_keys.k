"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Keys:
    r"""
    Keys is the Schema for the Keyss API. Configures Managed Keys in Vault

    Attributes
    ----------
    apiVersion : str, default is "managed.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Keys", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ManagedVaultUpboundIoV1alpha1KeysSpec, default is Undefined, required
        spec
    status : ManagedVaultUpboundIoV1alpha1KeysStatus, default is Undefined, optional
        status
    """


    apiVersion: "managed.vault.upbound.io/v1alpha1" = "managed.vault.upbound.io/v1alpha1"

    kind: "Keys" = "Keys"

    metadata?: v1.ObjectMeta

    spec: ManagedVaultUpboundIoV1alpha1KeysSpec

    status?: ManagedVaultUpboundIoV1alpha1KeysStatus


schema ManagedVaultUpboundIoV1alpha1KeysSpec:
    r"""
    KeysSpec defines the desired state of Keys

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ManagedVaultUpboundIoV1alpha1KeysSpecForProvider, default is Undefined, required
        for provider
    initProvider : ManagedVaultUpboundIoV1alpha1KeysSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ManagedVaultUpboundIoV1alpha1KeysSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : ManagedVaultUpboundIoV1alpha1KeysSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ManagedVaultUpboundIoV1alpha1KeysSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ManagedVaultUpboundIoV1alpha1KeysSpecForProvider

    initProvider?: ManagedVaultUpboundIoV1alpha1KeysSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ManagedVaultUpboundIoV1alpha1KeysSpecProviderConfigRef

    providerRef?: ManagedVaultUpboundIoV1alpha1KeysSpecProviderRef

    publishConnectionDetailsTo?: ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ManagedVaultUpboundIoV1alpha1KeysSpecWriteConnectionSecretToRef


schema ManagedVaultUpboundIoV1alpha1KeysSpecForProvider:
    r"""
    managed vault upbound io v1alpha1 keys spec for provider

    Attributes
    ----------
    aws : [ManagedVaultUpboundIoV1alpha1KeysSpecForProviderAwsItems0], default is Undefined, optional
        Configuration block for AWS Managed Keys
    azure : [ManagedVaultUpboundIoV1alpha1KeysSpecForProviderAzureItems0], default is Undefined, optional
        Configuration block for Azure Managed Keys
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    pkcs : [ManagedVaultUpboundIoV1alpha1KeysSpecForProviderPkcsItems0], default is Undefined, optional
        Configuration block for PKCS Managed Keys
    """


    aws?: [ManagedVaultUpboundIoV1alpha1KeysSpecForProviderAwsItems0]

    azure?: [ManagedVaultUpboundIoV1alpha1KeysSpecForProviderAzureItems0]

    namespace?: str

    pkcs?: [ManagedVaultUpboundIoV1alpha1KeysSpecForProviderPkcsItems0]


schema ManagedVaultUpboundIoV1alpha1KeysSpecForProviderAwsItems0:
    r"""
    managed vault upbound io v1alpha1 keys spec for provider aws items0

    Attributes
    ----------
    accessKey : str, default is Undefined, optional
        The AWS access key to use. The AWS access key to use
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    curve : str, default is Undefined, optional
        The curve to use for an ECDSA key. Used when key_type is ECDSA. Required if allow_generate_key is true. The curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true
    endpoint : str, default is Undefined, optional
        Used to specify a custom AWS endpoint. Used to specify a custom AWS endpoint
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. The size in bits for an RSA key. This field is required when 'key_type' is 'RSA'
    keyType : str, default is Undefined, optional
        The type of key to use. The type of key to use
    kmsKey : str, default is Undefined, optional
        An identifier for the key. An identifier for the key
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    region : str, default is Undefined, optional
        The AWS region where the keys are stored (or will be stored). The AWS region where the keys are stored (or will be stored)
    secretKey : str, default is Undefined, optional
        The AWS access key to use. The AWS secret key to use
    """


    accessKey?: str

    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    curve?: str

    endpoint?: str

    keyBits?: str

    keyType?: str

    kmsKey?: str

    name?: str

    region?: str

    secretKey?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecForProviderAzureItems0:
    r"""
    managed vault upbound io v1alpha1 keys spec for provider azure items0

    Attributes
    ----------
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    clientId : str, default is Undefined, optional
        The client id for credentials to query the Azure APIs. The client id for credentials to query the Azure APIs
    clientSecret : str, default is Undefined, optional
        The client secret for credentials to query the Azure APIs. The client secret for credentials to query the Azure APIs
    environment : str, default is Undefined, optional
        The Azure Cloud environment API endpoints to use. The Azure Cloud environment API endpoints to use
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. The size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true
    keyName : str, default is Undefined, optional
        The Key Vault key to use for encryption and decryption. The Key Vault key to use for encryption and decryption
    keyType : str, default is Undefined, optional
        The type of key to use. The type of key to use
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    resource : str, default is Undefined, optional
        The Azure Key Vault resource's DNS Suffix to connect to. The Azure Key Vault resource's DNS Suffix to connect to
    tenantId : str, default is Undefined, optional
        The tenant id for the Azure Active Directory organization. The tenant id for the Azure Active Directory organization
    vaultName : str, default is Undefined, optional
        The Key Vault vault to use for encryption and decryption. The Key Vault vault to use the encryption keys for encryption and decryption
    """


    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    clientId?: str

    clientSecret?: str

    environment?: str

    keyBits?: str

    keyName?: str

    keyType?: str

    name?: str

    resource?: str

    tenantId?: str

    vaultName?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecForProviderPkcsItems0:
    r"""
    managed vault upbound io v1alpha1 keys spec for provider pkcs items0

    Attributes
    ----------
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    curve : str, default is Undefined, optional
        The curve to use for an ECDSA key. Used when key_type is ECDSA. Required if allow_generate_key is true. Supplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true
    forceRwSession : str, default is Undefined, optional
        Force all operations to open up a read-write session to the HSM. Force all operations to open up a read-write session to the HSM
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. Supplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true
    keyId : str, default is Undefined, optional
        The id of a PKCS#11 key to use. The id of a PKCS#11 key to use
    keyLabel : str, default is Undefined, optional
        The label of the key to use. The label of the key to use
    library : str, default is Undefined, optional
        The name of the kms_library stanza to use from Vault's config to lookup the local library path. The name of the kms_library stanza to use from Vault's config to lookup the local library path
    mechanism : str, default is Undefined, optional
        The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string. The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    pin : str, default is Undefined, optional
        The PIN for login. The PIN for login
    slot : str, default is Undefined, optional
        The slot number to use, specified as a string in a decimal format (e.g. 2305843009213693953). The slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')
    tokenLabel : str, default is Undefined, optional
        The slot token label to use. The slot token label to use
    """


    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    curve?: str

    forceRwSession?: str

    keyBits?: str

    keyId?: str

    keyLabel?: str

    library?: str

    mechanism?: str

    name?: str

    pin?: str

    slot?: str

    tokenLabel?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    aws : [ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderAwsItems0], default is Undefined, optional
        Configuration block for AWS Managed Keys
    azure : [ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderAzureItems0], default is Undefined, optional
        Configuration block for Azure Managed Keys
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    pkcs : [ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderPkcsItems0], default is Undefined, optional
        Configuration block for PKCS Managed Keys
    """


    aws?: [ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderAwsItems0]

    azure?: [ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderAzureItems0]

    namespace?: str

    pkcs?: [ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderPkcsItems0]


schema ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderAwsItems0:
    r"""
    managed vault upbound io v1alpha1 keys spec init provider aws items0

    Attributes
    ----------
    accessKey : str, default is Undefined, optional
        The AWS access key to use. The AWS access key to use
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    curve : str, default is Undefined, optional
        The curve to use for an ECDSA key. Used when key_type is ECDSA. Required if allow_generate_key is true. The curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true
    endpoint : str, default is Undefined, optional
        Used to specify a custom AWS endpoint. Used to specify a custom AWS endpoint
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. The size in bits for an RSA key. This field is required when 'key_type' is 'RSA'
    keyType : str, default is Undefined, optional
        The type of key to use. The type of key to use
    kmsKey : str, default is Undefined, optional
        An identifier for the key. An identifier for the key
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    region : str, default is Undefined, optional
        The AWS region where the keys are stored (or will be stored). The AWS region where the keys are stored (or will be stored)
    secretKey : str, default is Undefined, optional
        The AWS access key to use. The AWS secret key to use
    """


    accessKey?: str

    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    curve?: str

    endpoint?: str

    keyBits?: str

    keyType?: str

    kmsKey?: str

    name?: str

    region?: str

    secretKey?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderAzureItems0:
    r"""
    managed vault upbound io v1alpha1 keys spec init provider azure items0

    Attributes
    ----------
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    clientId : str, default is Undefined, optional
        The client id for credentials to query the Azure APIs. The client id for credentials to query the Azure APIs
    clientSecret : str, default is Undefined, optional
        The client secret for credentials to query the Azure APIs. The client secret for credentials to query the Azure APIs
    environment : str, default is Undefined, optional
        The Azure Cloud environment API endpoints to use. The Azure Cloud environment API endpoints to use
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. The size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true
    keyName : str, default is Undefined, optional
        The Key Vault key to use for encryption and decryption. The Key Vault key to use for encryption and decryption
    keyType : str, default is Undefined, optional
        The type of key to use. The type of key to use
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    resource : str, default is Undefined, optional
        The Azure Key Vault resource's DNS Suffix to connect to. The Azure Key Vault resource's DNS Suffix to connect to
    tenantId : str, default is Undefined, optional
        The tenant id for the Azure Active Directory organization. The tenant id for the Azure Active Directory organization
    vaultName : str, default is Undefined, optional
        The Key Vault vault to use for encryption and decryption. The Key Vault vault to use the encryption keys for encryption and decryption
    """


    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    clientId?: str

    clientSecret?: str

    environment?: str

    keyBits?: str

    keyName?: str

    keyType?: str

    name?: str

    resource?: str

    tenantId?: str

    vaultName?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecInitProviderPkcsItems0:
    r"""
    managed vault upbound io v1alpha1 keys spec init provider pkcs items0

    Attributes
    ----------
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    curve : str, default is Undefined, optional
        The curve to use for an ECDSA key. Used when key_type is ECDSA. Required if allow_generate_key is true. Supplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true
    forceRwSession : str, default is Undefined, optional
        Force all operations to open up a read-write session to the HSM. Force all operations to open up a read-write session to the HSM
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. Supplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true
    keyId : str, default is Undefined, optional
        The id of a PKCS#11 key to use. The id of a PKCS#11 key to use
    keyLabel : str, default is Undefined, optional
        The label of the key to use. The label of the key to use
    library : str, default is Undefined, optional
        The name of the kms_library stanza to use from Vault's config to lookup the local library path. The name of the kms_library stanza to use from Vault's config to lookup the local library path
    mechanism : str, default is Undefined, optional
        The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string. The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    pin : str, default is Undefined, optional
        The PIN for login. The PIN for login
    slot : str, default is Undefined, optional
        The slot number to use, specified as a string in a decimal format (e.g. 2305843009213693953). The slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')
    tokenLabel : str, default is Undefined, optional
        The slot token label to use. The slot token label to use
    """


    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    curve?: str

    forceRwSession?: str

    keyBits?: str

    keyId?: str

    keyLabel?: str

    library?: str

    mechanism?: str

    name?: str

    pin?: str

    slot?: str

    tokenLabel?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ManagedVaultUpboundIoV1alpha1KeysSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ManagedVaultUpboundIoV1alpha1KeysSpecProviderConfigRefPolicy


schema ManagedVaultUpboundIoV1alpha1KeysSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ManagedVaultUpboundIoV1alpha1KeysSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ManagedVaultUpboundIoV1alpha1KeysSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ManagedVaultUpboundIoV1alpha1KeysSpecProviderRefPolicy


schema ManagedVaultUpboundIoV1alpha1KeysSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToConfigRef

    metadata?: ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToMetadata

    name: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToConfigRefPolicy


schema ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ManagedVaultUpboundIoV1alpha1KeysSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ManagedVaultUpboundIoV1alpha1KeysSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ManagedVaultUpboundIoV1alpha1KeysStatus:
    r"""
    KeysStatus defines the observed state of Keys.

    Attributes
    ----------
    atProvider : ManagedVaultUpboundIoV1alpha1KeysStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ManagedVaultUpboundIoV1alpha1KeysStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: ManagedVaultUpboundIoV1alpha1KeysStatusAtProvider

    conditions?: [ManagedVaultUpboundIoV1alpha1KeysStatusConditionsItems0]


schema ManagedVaultUpboundIoV1alpha1KeysStatusAtProvider:
    r"""
    managed vault upbound io v1alpha1 keys status at provider

    Attributes
    ----------
    aws : [ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderAwsItems0], default is Undefined, optional
        Configuration block for AWS Managed Keys
    azure : [ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderAzureItems0], default is Undefined, optional
        Configuration block for Azure Managed Keys
    id : str, default is Undefined, optional
        id
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    pkcs : [ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderPkcsItems0], default is Undefined, optional
        Configuration block for PKCS Managed Keys
    """


    aws?: [ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderAwsItems0]

    azure?: [ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderAzureItems0]

    id?: str

    namespace?: str

    pkcs?: [ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderPkcsItems0]


schema ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderAwsItems0:
    r"""
    managed vault upbound io v1alpha1 keys status at provider aws items0

    Attributes
    ----------
    accessKey : str, default is Undefined, optional
        The AWS access key to use. The AWS access key to use
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    curve : str, default is Undefined, optional
        The curve to use for an ECDSA key. Used when key_type is ECDSA. Required if allow_generate_key is true. The curve to use for an ECDSA key. Used when key_type is 'ECDSA'. Required if 'allow_generate_key' is true
    endpoint : str, default is Undefined, optional
        Used to specify a custom AWS endpoint. Used to specify a custom AWS endpoint
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. The size in bits for an RSA key. This field is required when 'key_type' is 'RSA'
    keyType : str, default is Undefined, optional
        The type of key to use. The type of key to use
    kmsKey : str, default is Undefined, optional
        An identifier for the key. An identifier for the key
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    region : str, default is Undefined, optional
        The AWS region where the keys are stored (or will be stored). The AWS region where the keys are stored (or will be stored)
    secretKey : str, default is Undefined, optional
        The AWS access key to use. The AWS secret key to use
    uuid : str, default is Undefined, optional
        ID of the managed key read from Vault
    """


    accessKey?: str

    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    curve?: str

    endpoint?: str

    keyBits?: str

    keyType?: str

    kmsKey?: str

    name?: str

    region?: str

    secretKey?: str

    uuid?: str


schema ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderAzureItems0:
    r"""
    managed vault upbound io v1alpha1 keys status at provider azure items0

    Attributes
    ----------
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    clientId : str, default is Undefined, optional
        The client id for credentials to query the Azure APIs. The client id for credentials to query the Azure APIs
    clientSecret : str, default is Undefined, optional
        The client secret for credentials to query the Azure APIs. The client secret for credentials to query the Azure APIs
    environment : str, default is Undefined, optional
        The Azure Cloud environment API endpoints to use. The Azure Cloud environment API endpoints to use
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. The size in bits for an RSA key. This field is required when 'key_type' is 'RSA' or when 'allow_generate_key' is true
    keyName : str, default is Undefined, optional
        The Key Vault key to use for encryption and decryption. The Key Vault key to use for encryption and decryption
    keyType : str, default is Undefined, optional
        The type of key to use. The type of key to use
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    resource : str, default is Undefined, optional
        The Azure Key Vault resource's DNS Suffix to connect to. The Azure Key Vault resource's DNS Suffix to connect to
    tenantId : str, default is Undefined, optional
        The tenant id for the Azure Active Directory organization. The tenant id for the Azure Active Directory organization
    uuid : str, default is Undefined, optional
        ID of the managed key read from Vault
    vaultName : str, default is Undefined, optional
        The Key Vault vault to use for encryption and decryption. The Key Vault vault to use the encryption keys for encryption and decryption
    """


    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    clientId?: str

    clientSecret?: str

    environment?: str

    keyBits?: str

    keyName?: str

    keyType?: str

    name?: str

    resource?: str

    tenantId?: str

    uuid?: str

    vaultName?: str


schema ManagedVaultUpboundIoV1alpha1KeysStatusAtProviderPkcsItems0:
    r"""
    managed vault upbound io v1alpha1 keys status at provider pkcs items0

    Attributes
    ----------
    allowGenerateKey : bool, default is Undefined, optional
        If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend. If no existing key can be found in the referenced backend, instructs Vault to generate a key within the backend
    allowReplaceKey : bool, default is Undefined, optional
        Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists. Controls the ability for Vault to replace through generation or importing a key into the configured backend even if a key is present, if set to false those operations are forbidden if a key exists.
    allowStoreKey : bool, default is Undefined, optional
        Controls the ability for Vault to import a key to the configured backend, if false, those operations will be forbidden. Controls the ability for Vault to import a key to the configured backend, if 'false', those operations will be forbidden
    anyMount : bool, default is Undefined, optional
        If true, allows usage from any mount point within the namespace. Allow usage from any mount point within the namespace if 'true'
    curve : str, default is Undefined, optional
        The curve to use for an ECDSA key. Used when key_type is ECDSA. Required if allow_generate_key is true. Supplies the curve value when using the 'CKM_ECDSA' mechanism. Required if 'allow_generate_key' is true
    forceRwSession : str, default is Undefined, optional
        Force all operations to open up a read-write session to the HSM. Force all operations to open up a read-write session to the HSM
    keyBits : str, default is Undefined, optional
        The size in bits for an RSA key. Supplies the size in bits of the key when using 'CKM_RSA_PKCS_PSS', 'CKM_RSA_PKCS_OAEP' or 'CKM_RSA_PKCS' as a value for 'mechanism'. Required if 'allow_generate_key' is true
    keyId : str, default is Undefined, optional
        The id of a PKCS#11 key to use. The id of a PKCS#11 key to use
    keyLabel : str, default is Undefined, optional
        The label of the key to use. The label of the key to use
    library : str, default is Undefined, optional
        The name of the kms_library stanza to use from Vault's config to lookup the local library path. The name of the kms_library stanza to use from Vault's config to lookup the local library path
    mechanism : str, default is Undefined, optional
        The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string. The encryption/decryption mechanism to use, specified as a hexadecimal (prefixed by 0x) string.
    name : str, default is Undefined, optional
        A unique lowercase name that serves as identifying the key. A unique lowercase name that serves as identifying the key
    pin : str, default is Undefined, optional
        The PIN for login. The PIN for login
    slot : str, default is Undefined, optional
        The slot number to use, specified as a string in a decimal format (e.g. 2305843009213693953). The slot number to use, specified as a string in a decimal format (e.g. '2305843009213693953')
    tokenLabel : str, default is Undefined, optional
        The slot token label to use. The slot token label to use
    uuid : str, default is Undefined, optional
        ID of the managed key read from Vault
    """


    allowGenerateKey?: bool

    allowReplaceKey?: bool

    allowStoreKey?: bool

    anyMount?: bool

    curve?: str

    forceRwSession?: str

    keyBits?: str

    keyId?: str

    keyLabel?: str

    library?: str

    mechanism?: str

    name?: str

    pin?: str

    slot?: str

    tokenLabel?: str

    uuid?: str


schema ManagedVaultUpboundIoV1alpha1KeysStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


