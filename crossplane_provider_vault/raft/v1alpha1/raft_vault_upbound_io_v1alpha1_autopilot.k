"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Autopilot:
    r"""
    Autopilot is the Schema for the Autopilots API. Configures Raft's Autopilot capabilities.

    Attributes
    ----------
    apiVersion : str, default is "raft.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Autopilot", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : RaftVaultUpboundIoV1alpha1AutopilotSpec, default is Undefined, required
        spec
    status : RaftVaultUpboundIoV1alpha1AutopilotStatus, default is Undefined, optional
        status
    """


    apiVersion: "raft.vault.upbound.io/v1alpha1" = "raft.vault.upbound.io/v1alpha1"

    kind: "Autopilot" = "Autopilot"

    metadata?: v1.ObjectMeta

    spec: RaftVaultUpboundIoV1alpha1AutopilotSpec

    status?: RaftVaultUpboundIoV1alpha1AutopilotStatus


schema RaftVaultUpboundIoV1alpha1AutopilotSpec:
    r"""
    AutopilotSpec defines the desired state of Autopilot

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : RaftVaultUpboundIoV1alpha1AutopilotSpecForProvider, default is Undefined, required
        for provider
    initProvider : RaftVaultUpboundIoV1alpha1AutopilotSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : RaftVaultUpboundIoV1alpha1AutopilotSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : RaftVaultUpboundIoV1alpha1AutopilotSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : RaftVaultUpboundIoV1alpha1AutopilotSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: RaftVaultUpboundIoV1alpha1AutopilotSpecForProvider

    initProvider?: RaftVaultUpboundIoV1alpha1AutopilotSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: RaftVaultUpboundIoV1alpha1AutopilotSpecProviderConfigRef

    providerRef?: RaftVaultUpboundIoV1alpha1AutopilotSpecProviderRef

    publishConnectionDetailsTo?: RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: RaftVaultUpboundIoV1alpha1AutopilotSpecWriteConnectionSecretToRef


schema RaftVaultUpboundIoV1alpha1AutopilotSpecForProvider:
    r"""
    raft vault upbound io v1alpha1 autopilot spec for provider

    Attributes
    ----------
    cleanupDeadServers : bool, default is Undefined, optional
        quorum is also set. Specifies whether to remove dead server nodes periodically or when a new server joins. This requires that min-quorum is also set.
    deadServerLastContactThreshold : str, default is Undefined, optional
        Limit the amount of time a server can go without leader contact before being considered failed. This only takes effect when cleanup_dead_servers is set. Limit the amount of time a server can go without leader contact before being considered failed. This only takes effect when cleanup_dead_servers is set.
    disableUpgradeMigration : bool, default is Undefined, optional
        only) Disables automatically upgrading Vault using autopilot. (Enterprise-only)
    lastContactThreshold : str, default is Undefined, optional
        Limit the amount of time a server can go without leader contact before being considered unhealthy. Limit the amount of time a server can go without leader contact before being considered unhealthy.
    maxTrailingLogs : float, default is Undefined, optional
        Maximum number of log entries in the Raft log that a server can be behind its leader before being considered unhealthy. Maximum number of log entries in the Raft log that a server can be behind its leader before being considered unhealthy.
    minQuorum : float, default is Undefined, optional
        Minimum number of servers allowed in a cluster before autopilot can prune dead servers. This should at least be 3. Applicable only for voting nodes. Minimum number of servers allowed in a cluster before autopilot can prune dead servers. This should at least be 3. Applicable only for voting nodes.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    serverStabilizationTime : str, default is Undefined, optional
        Minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster. Minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.
    """


    cleanupDeadServers?: bool

    deadServerLastContactThreshold?: str

    disableUpgradeMigration?: bool

    lastContactThreshold?: str

    maxTrailingLogs?: float

    minQuorum?: float

    namespace?: str

    serverStabilizationTime?: str


schema RaftVaultUpboundIoV1alpha1AutopilotSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    cleanupDeadServers : bool, default is Undefined, optional
        quorum is also set. Specifies whether to remove dead server nodes periodically or when a new server joins. This requires that min-quorum is also set.
    deadServerLastContactThreshold : str, default is Undefined, optional
        Limit the amount of time a server can go without leader contact before being considered failed. This only takes effect when cleanup_dead_servers is set. Limit the amount of time a server can go without leader contact before being considered failed. This only takes effect when cleanup_dead_servers is set.
    disableUpgradeMigration : bool, default is Undefined, optional
        only) Disables automatically upgrading Vault using autopilot. (Enterprise-only)
    lastContactThreshold : str, default is Undefined, optional
        Limit the amount of time a server can go without leader contact before being considered unhealthy. Limit the amount of time a server can go without leader contact before being considered unhealthy.
    maxTrailingLogs : float, default is Undefined, optional
        Maximum number of log entries in the Raft log that a server can be behind its leader before being considered unhealthy. Maximum number of log entries in the Raft log that a server can be behind its leader before being considered unhealthy.
    minQuorum : float, default is Undefined, optional
        Minimum number of servers allowed in a cluster before autopilot can prune dead servers. This should at least be 3. Applicable only for voting nodes. Minimum number of servers allowed in a cluster before autopilot can prune dead servers. This should at least be 3. Applicable only for voting nodes.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    serverStabilizationTime : str, default is Undefined, optional
        Minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster. Minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.
    """


    cleanupDeadServers?: bool

    deadServerLastContactThreshold?: str

    disableUpgradeMigration?: bool

    lastContactThreshold?: str

    maxTrailingLogs?: float

    minQuorum?: float

    namespace?: str

    serverStabilizationTime?: str


schema RaftVaultUpboundIoV1alpha1AutopilotSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RaftVaultUpboundIoV1alpha1AutopilotSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RaftVaultUpboundIoV1alpha1AutopilotSpecProviderConfigRefPolicy


schema RaftVaultUpboundIoV1alpha1AutopilotSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RaftVaultUpboundIoV1alpha1AutopilotSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RaftVaultUpboundIoV1alpha1AutopilotSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RaftVaultUpboundIoV1alpha1AutopilotSpecProviderRefPolicy


schema RaftVaultUpboundIoV1alpha1AutopilotSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToConfigRef

    metadata?: RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToMetadata

    name: str


schema RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToConfigRefPolicy


schema RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema RaftVaultUpboundIoV1alpha1AutopilotSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema RaftVaultUpboundIoV1alpha1AutopilotSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema RaftVaultUpboundIoV1alpha1AutopilotStatus:
    r"""
    AutopilotStatus defines the observed state of Autopilot.

    Attributes
    ----------
    atProvider : RaftVaultUpboundIoV1alpha1AutopilotStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [RaftVaultUpboundIoV1alpha1AutopilotStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: RaftVaultUpboundIoV1alpha1AutopilotStatusAtProvider

    conditions?: [RaftVaultUpboundIoV1alpha1AutopilotStatusConditionsItems0]


schema RaftVaultUpboundIoV1alpha1AutopilotStatusAtProvider:
    r"""
    raft vault upbound io v1alpha1 autopilot status at provider

    Attributes
    ----------
    cleanupDeadServers : bool, default is Undefined, optional
        quorum is also set. Specifies whether to remove dead server nodes periodically or when a new server joins. This requires that min-quorum is also set.
    deadServerLastContactThreshold : str, default is Undefined, optional
        Limit the amount of time a server can go without leader contact before being considered failed. This only takes effect when cleanup_dead_servers is set. Limit the amount of time a server can go without leader contact before being considered failed. This only takes effect when cleanup_dead_servers is set.
    disableUpgradeMigration : bool, default is Undefined, optional
        only) Disables automatically upgrading Vault using autopilot. (Enterprise-only)
    id : str, default is Undefined, optional
        id
    lastContactThreshold : str, default is Undefined, optional
        Limit the amount of time a server can go without leader contact before being considered unhealthy. Limit the amount of time a server can go without leader contact before being considered unhealthy.
    maxTrailingLogs : float, default is Undefined, optional
        Maximum number of log entries in the Raft log that a server can be behind its leader before being considered unhealthy. Maximum number of log entries in the Raft log that a server can be behind its leader before being considered unhealthy.
    minQuorum : float, default is Undefined, optional
        Minimum number of servers allowed in a cluster before autopilot can prune dead servers. This should at least be 3. Applicable only for voting nodes. Minimum number of servers allowed in a cluster before autopilot can prune dead servers. This should at least be 3. Applicable only for voting nodes.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    serverStabilizationTime : str, default is Undefined, optional
        Minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster. Minimum amount of time a server must be stable in the 'healthy' state before being added to the cluster.
    """


    cleanupDeadServers?: bool

    deadServerLastContactThreshold?: str

    disableUpgradeMigration?: bool

    id?: str

    lastContactThreshold?: str

    maxTrailingLogs?: float

    minQuorum?: float

    namespace?: str

    serverStabilizationTime?: str


schema RaftVaultUpboundIoV1alpha1AutopilotStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


