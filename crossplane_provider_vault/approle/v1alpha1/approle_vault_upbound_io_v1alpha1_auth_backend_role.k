"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema AuthBackendRole:
    r"""
    AuthBackendRole is the Schema for the AuthBackendRoles API. Manages AppRole auth backend roles in Vault.

    Attributes
    ----------
    apiVersion : str, default is "approle.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "AuthBackendRole", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpec, default is Undefined, required
        spec
    status : ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatus, default is Undefined, optional
        status
    """


    apiVersion: "approle.vault.upbound.io/v1alpha1" = "approle.vault.upbound.io/v1alpha1"

    kind: "AuthBackendRole" = "AuthBackendRole"

    metadata?: v1.ObjectMeta

    spec: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpec

    status?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatus


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpec:
    r"""
    AuthBackendRoleSpec defines the desired state of AuthBackendRole

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecForProvider, default is Undefined, required
        for provider
    initProvider : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecForProvider

    initProvider?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRef

    providerRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRef

    publishConnectionDetailsTo?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecWriteConnectionSecretToRef


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecForProvider:
    r"""
    approle vault upbound io v1alpha1 auth backend role spec for provider

    Attributes
    ----------
    backend : str, default is Undefined, optional
        The unique name of the auth backend to configure. Defaults to approle. Unique name of the auth backend to configure.
    bindSecretId : bool, default is Undefined, optional
        Whether or not to require secret_id to be presented when logging in using this AppRole. Defaults to true. Whether or not to require secret_id to be present when logging in using this AppRole.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    roleId : str, default is Undefined, optional
        The RoleID of this role. If not specified, one will be auto-generated. The RoleID of the role. Autogenerated if not set.
    roleName : str, default is Undefined, optional
        The name of the role. Name of the role.
    secretIdBoundCidrs : [str], default is Undefined, optional
        If set, specifies blocks of IP addresses which can perform the login operation. List of CIDR blocks that can log in using the AppRole.
    secretIdNumUses : float, default is Undefined, optional
        The number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses. Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. Leaving this unset or setting it to 0 will allow unlimited uses.
    secretIdTtl : float, default is Undefined, optional
        The number of seconds after which any SecretID expires. Number of seconds a SecretID remains valid for.
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    """


    backend?: str

    bindSecretId?: bool

    namespace?: str

    roleId?: str

    roleName?: str

    secretIdBoundCidrs?: [str]

    secretIdNumUses?: float

    secretIdTtl?: float

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    backend : str, default is Undefined, optional
        The unique name of the auth backend to configure. Defaults to approle. Unique name of the auth backend to configure.
    bindSecretId : bool, default is Undefined, optional
        Whether or not to require secret_id to be presented when logging in using this AppRole. Defaults to true. Whether or not to require secret_id to be present when logging in using this AppRole.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    roleId : str, default is Undefined, optional
        The RoleID of this role. If not specified, one will be auto-generated. The RoleID of the role. Autogenerated if not set.
    roleName : str, default is Undefined, optional
        The name of the role. Name of the role.
    secretIdBoundCidrs : [str], default is Undefined, optional
        If set, specifies blocks of IP addresses which can perform the login operation. List of CIDR blocks that can log in using the AppRole.
    secretIdNumUses : float, default is Undefined, optional
        The number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses. Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. Leaving this unset or setting it to 0 will allow unlimited uses.
    secretIdTtl : float, default is Undefined, optional
        The number of seconds after which any SecretID expires. Number of seconds a SecretID remains valid for.
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    """


    backend?: str

    bindSecretId?: bool

    namespace?: str

    roleId?: str

    roleName?: str

    secretIdBoundCidrs?: [str]

    secretIdNumUses?: float

    secretIdTtl?: float

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRefPolicy


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRefPolicy


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRef

    metadata?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToMetadata

    name: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatus:
    r"""
    AuthBackendRoleStatus defines the observed state of AuthBackendRole.

    Attributes
    ----------
    atProvider : ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatusAtProvider

    conditions?: [ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatusConditionsItems0]


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatusAtProvider:
    r"""
    approle vault upbound io v1alpha1 auth backend role status at provider

    Attributes
    ----------
    backend : str, default is Undefined, optional
        The unique name of the auth backend to configure. Defaults to approle. Unique name of the auth backend to configure.
    bindSecretId : bool, default is Undefined, optional
        Whether or not to require secret_id to be presented when logging in using this AppRole. Defaults to true. Whether or not to require secret_id to be present when logging in using this AppRole.
    id : str, default is Undefined, optional
        id
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    roleId : str, default is Undefined, optional
        The RoleID of this role. If not specified, one will be auto-generated. The RoleID of the role. Autogenerated if not set.
    roleName : str, default is Undefined, optional
        The name of the role. Name of the role.
    secretIdBoundCidrs : [str], default is Undefined, optional
        If set, specifies blocks of IP addresses which can perform the login operation. List of CIDR blocks that can log in using the AppRole.
    secretIdNumUses : float, default is Undefined, optional
        The number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses. Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. Leaving this unset or setting it to 0 will allow unlimited uses.
    secretIdTtl : float, default is Undefined, optional
        The number of seconds after which any SecretID expires. Number of seconds a SecretID remains valid for.
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    """


    backend?: str

    bindSecretId?: bool

    id?: str

    namespace?: str

    roleId?: str

    roleName?: str

    secretIdBoundCidrs?: [str]

    secretIdNumUses?: float

    secretIdTtl?: float

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


