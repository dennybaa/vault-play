"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema AuthBackendRoleSecretID:
    r"""
    AuthBackendRoleSecretID is the Schema for the AuthBackendRoleSecretIDs API. Manages AppRole auth backend role SecretIDs in Vault.

    Attributes
    ----------
    apiVersion : str, default is "approle.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "AuthBackendRoleSecretID", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpec, default is Undefined, required
        spec
    status : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatus, default is Undefined, optional
        status
    """


    apiVersion: "approle.vault.upbound.io/v1alpha1" = "approle.vault.upbound.io/v1alpha1"

    kind: "AuthBackendRoleSecretID" = "AuthBackendRoleSecretID"

    metadata?: v1.ObjectMeta

    spec: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpec

    status?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatus


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpec:
    r"""
    AuthBackendRoleSecretIDSpec defines the desired state of AuthBackendRoleSecretID

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecForProvider, default is Undefined, required
        for provider
    initProvider : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecForProvider

    initProvider?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderConfigRef

    providerRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderRef

    publishConnectionDetailsTo?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecWriteConnectionSecretToRef


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecForProvider:
    r"""
    approle vault upbound io v1alpha1 auth backend role secret ID spec for provider

    Attributes
    ----------
    backend : str, default is Undefined, optional
        Unique name of the auth backend to configure.
    cidrList : [str], default is Undefined, optional
        If set, specifies blocks of IP addresses which can perform the login operation using this SecretID. List of CIDR blocks that can log in using the SecretID.
    metadata : str, default is Undefined, optional
        A JSON-encoded string containing metadata in key-value pairs to be set on tokens issued with this SecretID. JSON-encoded secret data to write.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    roleName : str, default is Undefined, optional
        The name of the role to create the SecretID for. Name of the role.
    secretIdSecretRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecForProviderSecretIDSecretRef, default is Undefined, optional
        secret Id secret ref
    withWrappedAccessor : bool, default is Undefined, optional
        Set to true to use the wrapped secret-id accessor as the resource ID. If false (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or invalidated through unwrapping. Use the wrapped secret-id accessor as the id of this resource. If false, a fresh secret-id will be regenerated whenever the wrapping token is expired or invalidated through unwrapping.
    wrappingTtl : str, default is Undefined, optional
        If set, the SecretID response will be response-wrapped and available for the duration specified. Only a single unwrapping of the token is allowed. The TTL duration of the wrapped SecretID.
    """


    backend?: str

    cidrList?: [str]

    metadata?: str

    namespace?: str

    roleName?: str

    secretIdSecretRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecForProviderSecretIDSecretRef

    withWrappedAccessor?: bool

    wrappingTtl?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecForProviderSecretIDSecretRef:
    r"""
    The SecretID to be created. If set, uses "Push" mode.  Defaults to Vault auto-generating SecretIDs. The SecretID to be managed. If not specified, Vault auto-generates one.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    backend : str, default is Undefined, optional
        Unique name of the auth backend to configure.
    cidrList : [str], default is Undefined, optional
        If set, specifies blocks of IP addresses which can perform the login operation using this SecretID. List of CIDR blocks that can log in using the SecretID.
    metadata : str, default is Undefined, optional
        A JSON-encoded string containing metadata in key-value pairs to be set on tokens issued with this SecretID. JSON-encoded secret data to write.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    roleName : str, default is Undefined, optional
        The name of the role to create the SecretID for. Name of the role.
    withWrappedAccessor : bool, default is Undefined, optional
        Set to true to use the wrapped secret-id accessor as the resource ID. If false (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or invalidated through unwrapping. Use the wrapped secret-id accessor as the id of this resource. If false, a fresh secret-id will be regenerated whenever the wrapping token is expired or invalidated through unwrapping.
    wrappingTtl : str, default is Undefined, optional
        If set, the SecretID response will be response-wrapped and available for the duration specified. Only a single unwrapping of the token is allowed. The TTL duration of the wrapped SecretID.
    """


    backend?: str

    cidrList?: [str]

    metadata?: str

    namespace?: str

    roleName?: str

    withWrappedAccessor?: bool

    wrappingTtl?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderConfigRefPolicy


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderRefPolicy


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToConfigRef

    metadata?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToMetadata

    name: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToConfigRefPolicy


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatus:
    r"""
    AuthBackendRoleSecretIDStatus defines the observed state of AuthBackendRoleSecretID.

    Attributes
    ----------
    atProvider : ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatusAtProvider

    conditions?: [ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatusConditionsItems0]


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatusAtProvider:
    r"""
    approle vault upbound io v1alpha1 auth backend role secret ID status at provider

    Attributes
    ----------
    accessor : str, default is Undefined, optional
        The unique ID for this SecretID that can be safely logged. The unique ID used to access this SecretID.
    backend : str, default is Undefined, optional
        Unique name of the auth backend to configure.
    cidrList : [str], default is Undefined, optional
        If set, specifies blocks of IP addresses which can perform the login operation using this SecretID. List of CIDR blocks that can log in using the SecretID.
    id : str, default is Undefined, optional
        id
    metadata : str, default is Undefined, optional
        A JSON-encoded string containing metadata in key-value pairs to be set on tokens issued with this SecretID. JSON-encoded secret data to write.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    roleName : str, default is Undefined, optional
        The name of the role to create the SecretID for. Name of the role.
    withWrappedAccessor : bool, default is Undefined, optional
        Set to true to use the wrapped secret-id accessor as the resource ID. If false (default value), a fresh secret ID will be regenerated whenever the wrapping token is expired or invalidated through unwrapping. Use the wrapped secret-id accessor as the id of this resource. If false, a fresh secret-id will be regenerated whenever the wrapping token is expired or invalidated through unwrapping.
    wrappingAccessor : str, default is Undefined, optional
        The unique ID for the response-wrapped SecretID that can be safely logged. The wrapped SecretID accessor.
    wrappingTtl : str, default is Undefined, optional
        If set, the SecretID response will be response-wrapped and available for the duration specified. Only a single unwrapping of the token is allowed. The TTL duration of the wrapped SecretID.
    """


    accessor?: str

    backend?: str

    cidrList?: [str]

    id?: str

    metadata?: str

    namespace?: str

    roleName?: str

    withWrappedAccessor?: bool

    wrappingAccessor?: str

    wrappingTtl?: str


schema ApproleVaultUpboundIoV1alpha1AuthBackendRoleSecretIDStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


