"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema AuthBackend:
    r"""
    AuthBackend is the Schema for the AuthBackends API. Managing JWT/OIDC auth backends in Vault

    Attributes
    ----------
    apiVersion : str, default is "jwt.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "AuthBackend", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : JwtVaultUpboundIoV1alpha1AuthBackendSpec, default is Undefined, required
        spec
    status : JwtVaultUpboundIoV1alpha1AuthBackendStatus, default is Undefined, optional
        status
    """


    apiVersion: "jwt.vault.upbound.io/v1alpha1" = "jwt.vault.upbound.io/v1alpha1"

    kind: "AuthBackend" = "AuthBackend"

    metadata?: v1.ObjectMeta

    spec: JwtVaultUpboundIoV1alpha1AuthBackendSpec

    status?: JwtVaultUpboundIoV1alpha1AuthBackendStatus


schema JwtVaultUpboundIoV1alpha1AuthBackendSpec:
    r"""
    AuthBackendSpec defines the desired state of AuthBackend

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : JwtVaultUpboundIoV1alpha1AuthBackendSpecForProvider, default is Undefined, required
        for provider
    initProvider : JwtVaultUpboundIoV1alpha1AuthBackendSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : JwtVaultUpboundIoV1alpha1AuthBackendSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: JwtVaultUpboundIoV1alpha1AuthBackendSpecForProvider

    initProvider?: JwtVaultUpboundIoV1alpha1AuthBackendSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRef

    providerRef?: JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderRef

    publishConnectionDetailsTo?: JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: JwtVaultUpboundIoV1alpha1AuthBackendSpecWriteConnectionSecretToRef


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecForProvider:
    r"""
    jwt vault upbound io v1alpha1 auth backend spec for provider

    Attributes
    ----------
    boundIssuer : str, default is Undefined, optional
        The value against which to match the iss claim in a JWT The value against which to match the iss claim in a JWT
    defaultRole : str, default is Undefined, optional
        The default role to use if none is provided during login The default role to use if none is provided during login
    description : str, default is Undefined, optional
        The description of the auth backend The description of the auth backend
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    jwksCaPem : str, default is Undefined, optional
        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used. The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
    jwksUrl : str, default is Undefined, optional
        JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys". JWKS URL to use to authenticate signatures. Cannot be used with 'oidc_discovery_url' or 'jwt_validation_pubkeys'.
    jwtSupportedAlgs : [str], default is Undefined, optional
        A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ A list of supported signing algorithms. Defaults to [RS256]
    jwtValidationPubkeys : [str], default is Undefined, optional
        A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with 'jwks_url' or 'oidc_discovery_url'.
    local : bool, default is Undefined, optional
        Specifies if the auth method is local only. Specifies if the auth method is local only
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    namespaceInState : bool, default is Undefined, optional
        Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.
    oidcClientId : str, default is Undefined, optional
        Client ID used for OIDC backends Client ID used for OIDC
    oidcClientSecretSecretRef : JwtVaultUpboundIoV1alpha1AuthBackendSpecForProviderOidcClientSecretSecretRef, default is Undefined, optional
        oidc client secret secret ref
    oidcDiscoveryCaPem : str, default is Undefined, optional
        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
    oidcDiscoveryUrl : str, default is Undefined, optional
        The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys The OIDC Discovery URL, without any .well-known component (base path). Cannot be used with 'jwks_url' or 'jwt_validation_pubkeys'.
    oidcResponseMode : str, default is Undefined, optional
        The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false. The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'. Defaults to 'query'. If using Vault namespaces, and oidc_response_mode is 'form_post', then 'namespace_in_state' should be set to false.
    oidcResponseTypes : [str], default is Undefined, optional
        List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post. The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'. Note: 'id_token' may only be used if 'oidc_response_mode' is set to 'form_post'.
    path : str, default is Undefined, optional
        Path to mount the JWT/OIDC auth backend path to mount the backend
    providerConfig : {str:str}, default is Undefined, optional
        Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault. Provider specific handling configuration
    tune : [JwtVaultUpboundIoV1alpha1AuthBackendSpecForProviderTuneItems0], default is Undefined, optional
        tune
    $type : str, default is Undefined, optional
        Type of auth backend. Should be one of jwt or oidc. Default - jwt Type of backend. Can be either 'jwt' or 'oidc'
    """


    boundIssuer?: str

    defaultRole?: str

    description?: str

    disableRemount?: bool

    jwksCaPem?: str

    jwksUrl?: str

    jwtSupportedAlgs?: [str]

    jwtValidationPubkeys?: [str]

    local?: bool

    namespace?: str

    namespaceInState?: bool

    oidcClientId?: str

    oidcClientSecretSecretRef?: JwtVaultUpboundIoV1alpha1AuthBackendSpecForProviderOidcClientSecretSecretRef

    oidcDiscoveryCaPem?: str

    oidcDiscoveryUrl?: str

    oidcResponseMode?: str

    oidcResponseTypes?: [str]

    path?: str

    providerConfig?: {str:str}

    tune?: [JwtVaultUpboundIoV1alpha1AuthBackendSpecForProviderTuneItems0]

    $type?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecForProviderOidcClientSecretSecretRef:
    r"""
    Client Secret used for OIDC backends Client Secret used for OIDC

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecForProviderTuneItems0:
    r"""
    jwt vault upbound io v1alpha1 auth backend spec for provider tune items0

    Attributes
    ----------
    allowedResponseHeaders : [str], default is Undefined, optional
        List of headers to whitelist and allowing a plugin to include them in the response.
    auditNonHmacRequestKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
    auditNonHmacResponseKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
    defaultLeaseTtl : str, default is Undefined, optional
        Specifies the default time-to-live. If set, this overrides the global default. Must be a valid duration string
    listingVisibility : str, default is Undefined, optional
        Specifies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
    maxLeaseTtl : str, default is Undefined, optional
        Specifies the maximum time-to-live. If set, this overrides the global default. Must be a valid duration string
    passthroughRequestHeaders : [str], default is Undefined, optional
        List of headers to whitelist and pass from the request to the backend.
    tokenType : str, default is Undefined, optional
        Specifies the type of tokens that should be returned by the mount. Valid values are "default-service", "default-batch", "service", "batch".
    """


    allowedResponseHeaders?: [str]

    auditNonHmacRequestKeys?: [str]

    auditNonHmacResponseKeys?: [str]

    defaultLeaseTtl?: str

    listingVisibility?: str

    maxLeaseTtl?: str

    passthroughRequestHeaders?: [str]

    tokenType?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    boundIssuer : str, default is Undefined, optional
        The value against which to match the iss claim in a JWT The value against which to match the iss claim in a JWT
    defaultRole : str, default is Undefined, optional
        The default role to use if none is provided during login The default role to use if none is provided during login
    description : str, default is Undefined, optional
        The description of the auth backend The description of the auth backend
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    jwksCaPem : str, default is Undefined, optional
        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used. The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
    jwksUrl : str, default is Undefined, optional
        JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys". JWKS URL to use to authenticate signatures. Cannot be used with 'oidc_discovery_url' or 'jwt_validation_pubkeys'.
    jwtSupportedAlgs : [str], default is Undefined, optional
        A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ A list of supported signing algorithms. Defaults to [RS256]
    jwtValidationPubkeys : [str], default is Undefined, optional
        A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with 'jwks_url' or 'oidc_discovery_url'.
    local : bool, default is Undefined, optional
        Specifies if the auth method is local only. Specifies if the auth method is local only
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    namespaceInState : bool, default is Undefined, optional
        Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.
    oidcClientId : str, default is Undefined, optional
        Client ID used for OIDC backends Client ID used for OIDC
    oidcDiscoveryCaPem : str, default is Undefined, optional
        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
    oidcDiscoveryUrl : str, default is Undefined, optional
        The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys The OIDC Discovery URL, without any .well-known component (base path). Cannot be used with 'jwks_url' or 'jwt_validation_pubkeys'.
    oidcResponseMode : str, default is Undefined, optional
        The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false. The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'. Defaults to 'query'. If using Vault namespaces, and oidc_response_mode is 'form_post', then 'namespace_in_state' should be set to false.
    oidcResponseTypes : [str], default is Undefined, optional
        List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post. The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'. Note: 'id_token' may only be used if 'oidc_response_mode' is set to 'form_post'.
    path : str, default is Undefined, optional
        Path to mount the JWT/OIDC auth backend path to mount the backend
    providerConfig : {str:str}, default is Undefined, optional
        Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault. Provider specific handling configuration
    tune : [JwtVaultUpboundIoV1alpha1AuthBackendSpecInitProviderTuneItems0], default is Undefined, optional
        tune
    $type : str, default is Undefined, optional
        Type of auth backend. Should be one of jwt or oidc. Default - jwt Type of backend. Can be either 'jwt' or 'oidc'
    """


    boundIssuer?: str

    defaultRole?: str

    description?: str

    disableRemount?: bool

    jwksCaPem?: str

    jwksUrl?: str

    jwtSupportedAlgs?: [str]

    jwtValidationPubkeys?: [str]

    local?: bool

    namespace?: str

    namespaceInState?: bool

    oidcClientId?: str

    oidcDiscoveryCaPem?: str

    oidcDiscoveryUrl?: str

    oidcResponseMode?: str

    oidcResponseTypes?: [str]

    path?: str

    providerConfig?: {str:str}

    tune?: [JwtVaultUpboundIoV1alpha1AuthBackendSpecInitProviderTuneItems0]

    $type?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecInitProviderTuneItems0:
    r"""
    jwt vault upbound io v1alpha1 auth backend spec init provider tune items0

    Attributes
    ----------
    allowedResponseHeaders : [str], default is Undefined, optional
        List of headers to whitelist and allowing a plugin to include them in the response.
    auditNonHmacRequestKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
    auditNonHmacResponseKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
    defaultLeaseTtl : str, default is Undefined, optional
        Specifies the default time-to-live. If set, this overrides the global default. Must be a valid duration string
    listingVisibility : str, default is Undefined, optional
        Specifies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
    maxLeaseTtl : str, default is Undefined, optional
        Specifies the maximum time-to-live. If set, this overrides the global default. Must be a valid duration string
    passthroughRequestHeaders : [str], default is Undefined, optional
        List of headers to whitelist and pass from the request to the backend.
    tokenType : str, default is Undefined, optional
        Specifies the type of tokens that should be returned by the mount. Valid values are "default-service", "default-batch", "service", "batch".
    """


    allowedResponseHeaders?: [str]

    auditNonHmacRequestKeys?: [str]

    auditNonHmacResponseKeys?: [str]

    defaultLeaseTtl?: str

    listingVisibility?: str

    maxLeaseTtl?: str

    passthroughRequestHeaders?: [str]

    tokenType?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRefPolicy


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderRefPolicy


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRef

    metadata?: JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToMetadata

    name: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRefPolicy


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema JwtVaultUpboundIoV1alpha1AuthBackendStatus:
    r"""
    AuthBackendStatus defines the observed state of AuthBackend.

    Attributes
    ----------
    atProvider : JwtVaultUpboundIoV1alpha1AuthBackendStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [JwtVaultUpboundIoV1alpha1AuthBackendStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: JwtVaultUpboundIoV1alpha1AuthBackendStatusAtProvider

    conditions?: [JwtVaultUpboundIoV1alpha1AuthBackendStatusConditionsItems0]


schema JwtVaultUpboundIoV1alpha1AuthBackendStatusAtProvider:
    r"""
    jwt vault upbound io v1alpha1 auth backend status at provider

    Attributes
    ----------
    accessor : str, default is Undefined, optional
        The accessor for this auth method The accessor of the JWT auth backend
    boundIssuer : str, default is Undefined, optional
        The value against which to match the iss claim in a JWT The value against which to match the iss claim in a JWT
    defaultRole : str, default is Undefined, optional
        The default role to use if none is provided during login The default role to use if none is provided during login
    description : str, default is Undefined, optional
        The description of the auth backend The description of the auth backend
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    id : str, default is Undefined, optional
        id
    jwksCaPem : str, default is Undefined, optional
        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used. The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.
    jwksUrl : str, default is Undefined, optional
        JWKS URL to use to authenticate signatures. Cannot be used with "oidc_discovery_url" or "jwt_validation_pubkeys". JWKS URL to use to authenticate signatures. Cannot be used with 'oidc_discovery_url' or 'jwt_validation_pubkeys'.
    jwtSupportedAlgs : [str], default is Undefined, optional
        A list of supported signing algorithms. Vault 1.1.0 defaults to [RS256] but future or past versions of Vault may differ A list of supported signing algorithms. Defaults to [RS256]
    jwtValidationPubkeys : [str], default is Undefined, optional
        A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used in combination with oidc_discovery_url A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with 'jwks_url' or 'oidc_discovery_url'.
    local : bool, default is Undefined, optional
        Specifies if the auth method is local only. Specifies if the auth method is local only
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    namespaceInState : bool, default is Undefined, optional
        Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs Pass namespace in the OIDC state parameter instead of as a separate query parameter. With this setting, the allowed redirect URL(s) in Vault and on the provider side should not contain a namespace query parameter. This means only one redirect URL entry needs to be maintained on the OIDC provider side for all vault namespaces that will be authenticating against it. Defaults to true for new configs.
    oidcClientId : str, default is Undefined, optional
        Client ID used for OIDC backends Client ID used for OIDC
    oidcDiscoveryCaPem : str, default is Undefined, optional
        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used
    oidcDiscoveryUrl : str, default is Undefined, optional
        The OIDC Discovery URL, without any .well-known component (base path). Cannot be used in combination with jwt_validation_pubkeys The OIDC Discovery URL, without any .well-known component (base path). Cannot be used with 'jwks_url' or 'jwt_validation_pubkeys'.
    oidcResponseMode : str, default is Undefined, optional
        The response mode to be used in the OAuth2 request. Allowed values are query and form_post. Defaults to query. If using Vault namespaces, and oidc_response_mode is form_post, then namespace_in_state should be set to false. The response mode to be used in the OAuth2 request. Allowed values are 'query' and 'form_post'. Defaults to 'query'. If using Vault namespaces, and oidc_response_mode is 'form_post', then 'namespace_in_state' should be set to false.
    oidcResponseTypes : [str], default is Undefined, optional
        List of response types to request. Allowed values are 'code' and 'id_token'. Defaults to ["code"]. Note: id_token may only be used if oidc_response_mode is set to form_post. The response types to request. Allowed values are 'code' and 'id_token'. Defaults to 'code'. Note: 'id_token' may only be used if 'oidc_response_mode' is set to 'form_post'.
    path : str, default is Undefined, optional
        Path to mount the JWT/OIDC auth backend path to mount the backend
    providerConfig : {str:str}, default is Undefined, optional
        Provider specific handling configuration. All values may be strings, and the provider will convert to the appropriate type when configuring Vault. Provider specific handling configuration
    tune : [JwtVaultUpboundIoV1alpha1AuthBackendStatusAtProviderTuneItems0], default is Undefined, optional
        tune
    $type : str, default is Undefined, optional
        Type of auth backend. Should be one of jwt or oidc. Default - jwt Type of backend. Can be either 'jwt' or 'oidc'
    """


    accessor?: str

    boundIssuer?: str

    defaultRole?: str

    description?: str

    disableRemount?: bool

    id?: str

    jwksCaPem?: str

    jwksUrl?: str

    jwtSupportedAlgs?: [str]

    jwtValidationPubkeys?: [str]

    local?: bool

    namespace?: str

    namespaceInState?: bool

    oidcClientId?: str

    oidcDiscoveryCaPem?: str

    oidcDiscoveryUrl?: str

    oidcResponseMode?: str

    oidcResponseTypes?: [str]

    path?: str

    providerConfig?: {str:str}

    tune?: [JwtVaultUpboundIoV1alpha1AuthBackendStatusAtProviderTuneItems0]

    $type?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendStatusAtProviderTuneItems0:
    r"""
    jwt vault upbound io v1alpha1 auth backend status at provider tune items0

    Attributes
    ----------
    allowedResponseHeaders : [str], default is Undefined, optional
        List of headers to whitelist and allowing a plugin to include them in the response.
    auditNonHmacRequestKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
    auditNonHmacResponseKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
    defaultLeaseTtl : str, default is Undefined, optional
        Specifies the default time-to-live. If set, this overrides the global default. Must be a valid duration string
    listingVisibility : str, default is Undefined, optional
        Specifies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
    maxLeaseTtl : str, default is Undefined, optional
        Specifies the maximum time-to-live. If set, this overrides the global default. Must be a valid duration string
    passthroughRequestHeaders : [str], default is Undefined, optional
        List of headers to whitelist and pass from the request to the backend.
    tokenType : str, default is Undefined, optional
        Specifies the type of tokens that should be returned by the mount. Valid values are "default-service", "default-batch", "service", "batch".
    """


    allowedResponseHeaders?: [str]

    auditNonHmacRequestKeys?: [str]

    auditNonHmacResponseKeys?: [str]

    defaultLeaseTtl?: str

    listingVisibility?: str

    maxLeaseTtl?: str

    passthroughRequestHeaders?: [str]

    tokenType?: str


schema JwtVaultUpboundIoV1alpha1AuthBackendStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


