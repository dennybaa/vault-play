"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema AuthBackend:
    r"""
    AuthBackend is the Schema for the AuthBackends API. Manages GitHub Auth mounts in Vault.

    Attributes
    ----------
    apiVersion : str, default is "github.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "AuthBackend", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GithubVaultUpboundIoV1alpha1AuthBackendSpec, default is Undefined, required
        spec
    status : GithubVaultUpboundIoV1alpha1AuthBackendStatus, default is Undefined, optional
        status
    """


    apiVersion: "github.vault.upbound.io/v1alpha1" = "github.vault.upbound.io/v1alpha1"

    kind: "AuthBackend" = "AuthBackend"

    metadata?: v1.ObjectMeta

    spec: GithubVaultUpboundIoV1alpha1AuthBackendSpec

    status?: GithubVaultUpboundIoV1alpha1AuthBackendStatus


schema GithubVaultUpboundIoV1alpha1AuthBackendSpec:
    r"""
    AuthBackendSpec defines the desired state of AuthBackend

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : GithubVaultUpboundIoV1alpha1AuthBackendSpecForProvider, default is Undefined, required
        for provider
    initProvider : GithubVaultUpboundIoV1alpha1AuthBackendSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : GithubVaultUpboundIoV1alpha1AuthBackendSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: GithubVaultUpboundIoV1alpha1AuthBackendSpecForProvider

    initProvider?: GithubVaultUpboundIoV1alpha1AuthBackendSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRef

    providerRef?: GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderRef

    publishConnectionDetailsTo?: GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: GithubVaultUpboundIoV1alpha1AuthBackendSpecWriteConnectionSecretToRef


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecForProvider:
    r"""
    github vault upbound io v1alpha1 auth backend spec for provider

    Attributes
    ----------
    baseUrl : str, default is Undefined, optional
        The API endpoint to use. Useful if you are running GitHub Enterprise or an API-compatible authentication server. The API endpoint to use. Useful if you are running GitHub Enterprise or an API-compatible authentication server.
    description : str, default is Undefined, optional
        Specifies the description of the mount. This overrides the current stored value, if any. Specifies the description of the mount. This overrides the current stored value, if any.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    organization : str, default is Undefined, optional
        The organization configured users must be part of. The organization users must be part of.
    organizationId : float, default is Undefined, optional
        The ID of the organization users must be part of. Vault will attempt to fetch and set this value if it is not provided. (Vault 1.10+) The ID of the organization users must be part of. Vault will attempt to fetch and set this value if it is not provided (vault-1.10+)
    path : str, default is Undefined, optional
        Path where the auth backend is mounted. Defaults to auth/github if not specified. Path where the auth backend is mounted
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    tune : [GithubVaultUpboundIoV1alpha1AuthBackendSpecForProviderTuneItems0], default is Undefined, optional
        Extra configuration block. Structure is documented below.
    """


    baseUrl?: str

    description?: str

    disableRemount?: bool

    namespace?: str

    organization?: str

    organizationId?: float

    path?: str

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str

    tune?: [GithubVaultUpboundIoV1alpha1AuthBackendSpecForProviderTuneItems0]


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecForProviderTuneItems0:
    r"""
    github vault upbound io v1alpha1 auth backend spec for provider tune items0

    Attributes
    ----------
    allowedResponseHeaders : [str], default is Undefined, optional
        List of headers to whitelist and allowing a plugin to include them in the response.
    auditNonHmacRequestKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
    auditNonHmacResponseKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
    defaultLeaseTtl : str, default is Undefined, optional
        Specifies the default time-to-live. If set, this overrides the global default. Must be a valid duration string
    listingVisibility : str, default is Undefined, optional
        Specifies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
    maxLeaseTtl : str, default is Undefined, optional
        Specifies the maximum time-to-live. If set, this overrides the global default. Must be a valid duration string
    passthroughRequestHeaders : [str], default is Undefined, optional
        List of headers to whitelist and pass from the request to the backend.
    tokenType : str, default is Undefined, optional
        Specifies the type of tokens that should be returned by the mount. Valid values are "default-service", "default-batch", "service", "batch".
    """


    allowedResponseHeaders?: [str]

    auditNonHmacRequestKeys?: [str]

    auditNonHmacResponseKeys?: [str]

    defaultLeaseTtl?: str

    listingVisibility?: str

    maxLeaseTtl?: str

    passthroughRequestHeaders?: [str]

    tokenType?: str


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    baseUrl : str, default is Undefined, optional
        The API endpoint to use. Useful if you are running GitHub Enterprise or an API-compatible authentication server. The API endpoint to use. Useful if you are running GitHub Enterprise or an API-compatible authentication server.
    description : str, default is Undefined, optional
        Specifies the description of the mount. This overrides the current stored value, if any. Specifies the description of the mount. This overrides the current stored value, if any.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    organization : str, default is Undefined, optional
        The organization configured users must be part of. The organization users must be part of.
    organizationId : float, default is Undefined, optional
        The ID of the organization users must be part of. Vault will attempt to fetch and set this value if it is not provided. (Vault 1.10+) The ID of the organization users must be part of. Vault will attempt to fetch and set this value if it is not provided (vault-1.10+)
    path : str, default is Undefined, optional
        Path where the auth backend is mounted. Defaults to auth/github if not specified. Path where the auth backend is mounted
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    tune : [GithubVaultUpboundIoV1alpha1AuthBackendSpecInitProviderTuneItems0], default is Undefined, optional
        Extra configuration block. Structure is documented below.
    """


    baseUrl?: str

    description?: str

    disableRemount?: bool

    namespace?: str

    organization?: str

    organizationId?: float

    path?: str

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str

    tune?: [GithubVaultUpboundIoV1alpha1AuthBackendSpecInitProviderTuneItems0]


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecInitProviderTuneItems0:
    r"""
    github vault upbound io v1alpha1 auth backend spec init provider tune items0

    Attributes
    ----------
    allowedResponseHeaders : [str], default is Undefined, optional
        List of headers to whitelist and allowing a plugin to include them in the response.
    auditNonHmacRequestKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
    auditNonHmacResponseKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
    defaultLeaseTtl : str, default is Undefined, optional
        Specifies the default time-to-live. If set, this overrides the global default. Must be a valid duration string
    listingVisibility : str, default is Undefined, optional
        Specifies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
    maxLeaseTtl : str, default is Undefined, optional
        Specifies the maximum time-to-live. If set, this overrides the global default. Must be a valid duration string
    passthroughRequestHeaders : [str], default is Undefined, optional
        List of headers to whitelist and pass from the request to the backend.
    tokenType : str, default is Undefined, optional
        Specifies the type of tokens that should be returned by the mount. Valid values are "default-service", "default-batch", "service", "batch".
    """


    allowedResponseHeaders?: [str]

    auditNonHmacRequestKeys?: [str]

    auditNonHmacResponseKeys?: [str]

    defaultLeaseTtl?: str

    listingVisibility?: str

    maxLeaseTtl?: str

    passthroughRequestHeaders?: [str]

    tokenType?: str


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRefPolicy


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderRefPolicy


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRef

    metadata?: GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToMetadata

    name: str


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRefPolicy


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema GithubVaultUpboundIoV1alpha1AuthBackendSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema GithubVaultUpboundIoV1alpha1AuthBackendStatus:
    r"""
    AuthBackendStatus defines the observed state of AuthBackend.

    Attributes
    ----------
    atProvider : GithubVaultUpboundIoV1alpha1AuthBackendStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [GithubVaultUpboundIoV1alpha1AuthBackendStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: GithubVaultUpboundIoV1alpha1AuthBackendStatusAtProvider

    conditions?: [GithubVaultUpboundIoV1alpha1AuthBackendStatusConditionsItems0]


schema GithubVaultUpboundIoV1alpha1AuthBackendStatusAtProvider:
    r"""
    github vault upbound io v1alpha1 auth backend status at provider

    Attributes
    ----------
    accessor : str, default is Undefined, optional
        The mount accessor related to the auth mount. It is useful for integration with Identity Secrets Engine. The mount accessor related to the auth mount.
    baseUrl : str, default is Undefined, optional
        The API endpoint to use. Useful if you are running GitHub Enterprise or an API-compatible authentication server. The API endpoint to use. Useful if you are running GitHub Enterprise or an API-compatible authentication server.
    description : str, default is Undefined, optional
        Specifies the description of the mount. This overrides the current stored value, if any. Specifies the description of the mount. This overrides the current stored value, if any.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    id : str, default is Undefined, optional
        id
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    organization : str, default is Undefined, optional
        The organization configured users must be part of. The organization users must be part of.
    organizationId : float, default is Undefined, optional
        The ID of the organization users must be part of. Vault will attempt to fetch and set this value if it is not provided. (Vault 1.10+) The ID of the organization users must be part of. Vault will attempt to fetch and set this value if it is not provided (vault-1.10+)
    path : str, default is Undefined, optional
        Path where the auth backend is mounted. Defaults to auth/github if not specified. Path where the auth backend is mounted
    tokenBoundCidrs : [str], default is Undefined, optional
        List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well. Specifies the blocks of IP addresses which are allowed to use the generated token
    tokenExplicitMaxTtl : float, default is Undefined, optional
        If set, will encode an explicit max TTL onto the token in number of seconds. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal. Generated Token's Explicit Maximum TTL in seconds
    tokenMaxTtl : float, default is Undefined, optional
        The maximum lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The maximum lifetime of the generated token
    tokenNoDefaultPolicy : bool, default is Undefined, optional
        If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies. If true, the 'default' policy will not automatically be added to generated tokens
    tokenNumUses : float, default is Undefined, optional
        The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. The maximum number of times a token may be used, a value of zero means unlimited
    tokenPeriod : float, default is Undefined, optional
        If set, indicates that the token generated using this role should never expire. The token should be renewed within the duration specified by this value. At each renewal, the token's TTL will be set to the value of this field. Specified in seconds. Generated Token's Period
    tokenPolicies : [str], default is Undefined, optional
        List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values. Generated Token's Policies
    tokenTtl : float, default is Undefined, optional
        The incremental lifetime for generated tokens in number of seconds. Its current value will be referenced at renewal time. The initial ttl of the token to generate in seconds
    tokenType : str, default is Undefined, optional
        The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. The type of token to generate, service or batch
    tune : [GithubVaultUpboundIoV1alpha1AuthBackendStatusAtProviderTuneItems0], default is Undefined, optional
        Extra configuration block. Structure is documented below.
    """


    accessor?: str

    baseUrl?: str

    description?: str

    disableRemount?: bool

    id?: str

    namespace?: str

    organization?: str

    organizationId?: float

    path?: str

    tokenBoundCidrs?: [str]

    tokenExplicitMaxTtl?: float

    tokenMaxTtl?: float

    tokenNoDefaultPolicy?: bool

    tokenNumUses?: float

    tokenPeriod?: float

    tokenPolicies?: [str]

    tokenTtl?: float

    tokenType?: str

    tune?: [GithubVaultUpboundIoV1alpha1AuthBackendStatusAtProviderTuneItems0]


schema GithubVaultUpboundIoV1alpha1AuthBackendStatusAtProviderTuneItems0:
    r"""
    github vault upbound io v1alpha1 auth backend status at provider tune items0

    Attributes
    ----------
    allowedResponseHeaders : [str], default is Undefined, optional
        List of headers to whitelist and allowing a plugin to include them in the response.
    auditNonHmacRequestKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
    auditNonHmacResponseKeys : [str], default is Undefined, optional
        Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
    defaultLeaseTtl : str, default is Undefined, optional
        Specifies the default time-to-live. If set, this overrides the global default. Must be a valid duration string
    listingVisibility : str, default is Undefined, optional
        Specifies whether to show this mount in the UI-specific listing endpoint. Valid values are "unauth" or "hidden".
    maxLeaseTtl : str, default is Undefined, optional
        Specifies the maximum time-to-live. If set, this overrides the global default. Must be a valid duration string
    passthroughRequestHeaders : [str], default is Undefined, optional
        List of headers to whitelist and pass from the request to the backend.
    tokenType : str, default is Undefined, optional
        Specifies the type of tokens that should be returned by the mount. Valid values are "default-service", "default-batch", "service", "batch".
    """


    allowedResponseHeaders?: [str]

    auditNonHmacRequestKeys?: [str]

    auditNonHmacResponseKeys?: [str]

    defaultLeaseTtl?: str

    listingVisibility?: str

    maxLeaseTtl?: str

    passthroughRequestHeaders?: [str]

    tokenType?: str


schema GithubVaultUpboundIoV1alpha1AuthBackendStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


