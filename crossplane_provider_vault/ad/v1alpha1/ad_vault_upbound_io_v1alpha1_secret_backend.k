"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SecretBackend:
    r"""
    SecretBackend is the Schema for the SecretBackends API. Creates an Active Directory secret backend for Vault.

    Attributes
    ----------
    apiVersion : str, default is "ad.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SecretBackend", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : AdVaultUpboundIoV1alpha1SecretBackendSpec, default is Undefined, required
        spec
    status : AdVaultUpboundIoV1alpha1SecretBackendStatus, default is Undefined, optional
        status
    """


    apiVersion: "ad.vault.upbound.io/v1alpha1" = "ad.vault.upbound.io/v1alpha1"

    kind: "SecretBackend" = "SecretBackend"

    metadata?: v1.ObjectMeta

    spec: AdVaultUpboundIoV1alpha1SecretBackendSpec

    status?: AdVaultUpboundIoV1alpha1SecretBackendStatus


schema AdVaultUpboundIoV1alpha1SecretBackendSpec:
    r"""
    SecretBackendSpec defines the desired state of SecretBackend

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : AdVaultUpboundIoV1alpha1SecretBackendSpecForProvider, default is Undefined, required
        for provider
    initProvider : AdVaultUpboundIoV1alpha1SecretBackendSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : AdVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : AdVaultUpboundIoV1alpha1SecretBackendSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : AdVaultUpboundIoV1alpha1SecretBackendSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: AdVaultUpboundIoV1alpha1SecretBackendSpecForProvider

    initProvider?: AdVaultUpboundIoV1alpha1SecretBackendSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRef

    providerRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecProviderRef

    publishConnectionDetailsTo?: AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecWriteConnectionSecretToRef


schema AdVaultUpboundIoV1alpha1SecretBackendSpecForProvider:
    r"""
    ad vault upbound io v1alpha1 secret backend spec for provider

    Attributes
    ----------
    anonymousGroupSearch : bool, default is Undefined, optional
        Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test). Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
    backend : str, default is Undefined, optional
        The unique path this backend should be mounted at. Must not begin or end with a /. Defaults to ad. The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
    binddn : str, default is Undefined, optional
        Distinguished name of object to bind when performing user and group search. Distinguished name of object to bind when performing user and group search.
    bindpassSecretRef : AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderBindpassSecretRef, default is Undefined, optional
        bindpass secret ref
    caseSensitiveNames : bool, default is Undefined, optional
        If set, user and group names assigned to policies within the backend will be case sensitive. Otherwise, names will be normalized to lower case. If true, case sensitivity will be used when comparing usernames and groups for matching policies.
    certificate : str, default is Undefined, optional
        CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded. CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
    clientTlsCertSecretRef : AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderClientTLSCertSecretRef, default is Undefined, optional
        client Tls cert secret ref
    clientTlsKeySecretRef : AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderClientTLSKeySecretRef, default is Undefined, optional
        client Tls key secret ref
    defaultLeaseTtlSeconds : float, default is Undefined, optional
        Default lease duration for secrets in seconds. Default lease duration for secrets in seconds
    denyNullBind : bool, default is Undefined, optional
        Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true. Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
    description : str, default is Undefined, optional
        Human-friendly description of the mount for the Active Directory backend. Human-friendly description of the mount for the backend.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    discoverdn : bool, default is Undefined, optional
        Use anonymous bind to discover the bind Distinguished Name of a user. Use anonymous bind to discover the bind DN of a user.
    formatter : str, default is Undefined, optional
        Deprecated use password_policy. Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix". Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
    groupattr : str, default is Undefined, optional
        LDAP attribute to follow on objects returned by  in order to enumerate user group membership. Examples: cn or memberOf, etc. Defaults to cn. LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: "cn" or "memberOf", etc. Default: cn
    groupdn : str, default is Undefined, optional
        LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org). LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
    groupfilter : str, default is Undefined, optional
        Go template for querying group membership of user  The template can access the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}})) Go template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
    insecureTls : bool, default is Undefined, optional
        Skip LDAP server SSL Certificate verification. This is not recommended for production. Defaults to false. Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
    lastRotationTolerance : float, default is Undefined, optional
        The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.
    length : float, default is Undefined, optional
        Deprecated use password_policy. The desired length of passwords that Vault generates. Mutually exclusive with The desired length of passwords that Vault generates.
    local : bool, default is Undefined, optional
        Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time. Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.
    maxLeaseTtlSeconds : float, default is Undefined, optional
        Maximum possible lease duration for secrets in seconds. Maximum possible lease duration for secrets in seconds.
    maxTtl : float, default is Undefined, optional
        In seconds, the maximum password time-to-live. In seconds, the maximum password time-to-live.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    passwordPolicy : str, default is Undefined, optional
        1.11+ Name of the password policy to use to generate passwords.
    requestTimeout : float, default is Undefined, optional
        Timeout, in seconds, for the connection when making requests against the server before returning back an error. Timeout, in seconds, for the connection when making requests against the server before returning back an error.
    starttls : bool, default is Undefined, optional
        Issue a StartTLS command after establishing unencrypted connection. Issue a StartTLS command after establishing unencrypted connection.
    tlsMaxVersion : str, default is Undefined, optional
        Maximum TLS version to use. Accepted values are tls10, tls11, tls12 or tls13. Defaults to tls12. Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
    tlsMinVersion : str, default is Undefined, optional
        Minimum TLS version to use. Accepted values are tls10, tls11, tls12 or tls13. Defaults to tls12. Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
    ttl : float, default is Undefined, optional
        In seconds, the default password time-to-live. In seconds, the default password time-to-live.
    upndomain : str, default is Undefined, optional
        Enables userPrincipalDomain login with [username]@UPNDomain. Enables userPrincipalDomain login with [username]@UPNDomain.
    url : str, default is Undefined, optional
        LDAP URL to connect to. Multiple URLs can be specified by concatenating them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1. LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
    usePre111GroupCnBehavior : bool, default is Undefined, optional
        In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations. In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
    useTokenGroups : bool, default is Undefined, optional
        If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones. If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
    userattr : str, default is Undefined, optional
        Attribute used when searching users. Defaults to cn. Attribute used for users (default: cn)
    userdn : str, default is Undefined, optional
        LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`. LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
    """


    anonymousGroupSearch?: bool

    backend?: str

    binddn?: str

    bindpassSecretRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderBindpassSecretRef

    caseSensitiveNames?: bool

    certificate?: str

    clientTlsCertSecretRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderClientTLSCertSecretRef

    clientTlsKeySecretRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderClientTLSKeySecretRef

    defaultLeaseTtlSeconds?: float

    denyNullBind?: bool

    description?: str

    disableRemount?: bool

    discoverdn?: bool

    formatter?: str

    groupattr?: str

    groupdn?: str

    groupfilter?: str

    insecureTls?: bool

    lastRotationTolerance?: float

    length?: float

    local?: bool

    maxLeaseTtlSeconds?: float

    maxTtl?: float

    namespace?: str

    passwordPolicy?: str

    requestTimeout?: float

    starttls?: bool

    tlsMaxVersion?: str

    tlsMinVersion?: str

    ttl?: float

    upndomain?: str

    url?: str

    usePre111GroupCnBehavior?: bool

    useTokenGroups?: bool

    userattr?: str

    userdn?: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderBindpassSecretRef:
    r"""
    Password to use along with binddn when performing user search. LDAP password for searching for the user DN.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderClientTLSCertSecretRef:
    r"""
    Client certificate to provide to the LDAP server, must be x509 PEM encoded. Client certificate to provide to the LDAP server, must be x509 PEM encoded.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecForProviderClientTLSKeySecretRef:
    r"""
    Client certificate key to provide to the LDAP server, must be x509 PEM encoded. Client certificate key to provide to the LDAP server, must be x509 PEM encoded.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    anonymousGroupSearch : bool, default is Undefined, optional
        Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test). Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
    backend : str, default is Undefined, optional
        The unique path this backend should be mounted at. Must not begin or end with a /. Defaults to ad. The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
    binddn : str, default is Undefined, optional
        Distinguished name of object to bind when performing user and group search. Distinguished name of object to bind when performing user and group search.
    caseSensitiveNames : bool, default is Undefined, optional
        If set, user and group names assigned to policies within the backend will be case sensitive. Otherwise, names will be normalized to lower case. If true, case sensitivity will be used when comparing usernames and groups for matching policies.
    certificate : str, default is Undefined, optional
        CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded. CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
    defaultLeaseTtlSeconds : float, default is Undefined, optional
        Default lease duration for secrets in seconds. Default lease duration for secrets in seconds
    denyNullBind : bool, default is Undefined, optional
        Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true. Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
    description : str, default is Undefined, optional
        Human-friendly description of the mount for the Active Directory backend. Human-friendly description of the mount for the backend.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    discoverdn : bool, default is Undefined, optional
        Use anonymous bind to discover the bind Distinguished Name of a user. Use anonymous bind to discover the bind DN of a user.
    formatter : str, default is Undefined, optional
        Deprecated use password_policy. Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix". Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
    groupattr : str, default is Undefined, optional
        LDAP attribute to follow on objects returned by  in order to enumerate user group membership. Examples: cn or memberOf, etc. Defaults to cn. LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: "cn" or "memberOf", etc. Default: cn
    groupdn : str, default is Undefined, optional
        LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org). LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
    groupfilter : str, default is Undefined, optional
        Go template for querying group membership of user  The template can access the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}})) Go template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
    insecureTls : bool, default is Undefined, optional
        Skip LDAP server SSL Certificate verification. This is not recommended for production. Defaults to false. Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
    lastRotationTolerance : float, default is Undefined, optional
        The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.
    length : float, default is Undefined, optional
        Deprecated use password_policy. The desired length of passwords that Vault generates. Mutually exclusive with The desired length of passwords that Vault generates.
    local : bool, default is Undefined, optional
        Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time. Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.
    maxLeaseTtlSeconds : float, default is Undefined, optional
        Maximum possible lease duration for secrets in seconds. Maximum possible lease duration for secrets in seconds.
    maxTtl : float, default is Undefined, optional
        In seconds, the maximum password time-to-live. In seconds, the maximum password time-to-live.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    passwordPolicy : str, default is Undefined, optional
        1.11+ Name of the password policy to use to generate passwords.
    requestTimeout : float, default is Undefined, optional
        Timeout, in seconds, for the connection when making requests against the server before returning back an error. Timeout, in seconds, for the connection when making requests against the server before returning back an error.
    starttls : bool, default is Undefined, optional
        Issue a StartTLS command after establishing unencrypted connection. Issue a StartTLS command after establishing unencrypted connection.
    tlsMaxVersion : str, default is Undefined, optional
        Maximum TLS version to use. Accepted values are tls10, tls11, tls12 or tls13. Defaults to tls12. Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
    tlsMinVersion : str, default is Undefined, optional
        Minimum TLS version to use. Accepted values are tls10, tls11, tls12 or tls13. Defaults to tls12. Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
    ttl : float, default is Undefined, optional
        In seconds, the default password time-to-live. In seconds, the default password time-to-live.
    upndomain : str, default is Undefined, optional
        Enables userPrincipalDomain login with [username]@UPNDomain. Enables userPrincipalDomain login with [username]@UPNDomain.
    url : str, default is Undefined, optional
        LDAP URL to connect to. Multiple URLs can be specified by concatenating them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1. LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
    usePre111GroupCnBehavior : bool, default is Undefined, optional
        In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations. In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
    useTokenGroups : bool, default is Undefined, optional
        If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones. If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
    userattr : str, default is Undefined, optional
        Attribute used when searching users. Defaults to cn. Attribute used for users (default: cn)
    userdn : str, default is Undefined, optional
        LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`. LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
    """


    anonymousGroupSearch?: bool

    backend?: str

    binddn?: str

    caseSensitiveNames?: bool

    certificate?: str

    defaultLeaseTtlSeconds?: float

    denyNullBind?: bool

    description?: str

    disableRemount?: bool

    discoverdn?: bool

    formatter?: str

    groupattr?: str

    groupdn?: str

    groupfilter?: str

    insecureTls?: bool

    lastRotationTolerance?: float

    length?: float

    local?: bool

    maxLeaseTtlSeconds?: float

    maxTtl?: float

    namespace?: str

    passwordPolicy?: str

    requestTimeout?: float

    starttls?: bool

    tlsMaxVersion?: str

    tlsMinVersion?: str

    ttl?: float

    upndomain?: str

    url?: str

    usePre111GroupCnBehavior?: bool

    useTokenGroups?: bool

    userattr?: str

    userdn?: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AdVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AdVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRefPolicy


schema AdVaultUpboundIoV1alpha1SecretBackendSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AdVaultUpboundIoV1alpha1SecretBackendSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AdVaultUpboundIoV1alpha1SecretBackendSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AdVaultUpboundIoV1alpha1SecretBackendSpecProviderRefPolicy


schema AdVaultUpboundIoV1alpha1SecretBackendSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRef

    metadata?: AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToMetadata

    name: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRefPolicy


schema AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema AdVaultUpboundIoV1alpha1SecretBackendSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema AdVaultUpboundIoV1alpha1SecretBackendSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema AdVaultUpboundIoV1alpha1SecretBackendStatus:
    r"""
    SecretBackendStatus defines the observed state of SecretBackend.

    Attributes
    ----------
    atProvider : AdVaultUpboundIoV1alpha1SecretBackendStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [AdVaultUpboundIoV1alpha1SecretBackendStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: AdVaultUpboundIoV1alpha1SecretBackendStatusAtProvider

    conditions?: [AdVaultUpboundIoV1alpha1SecretBackendStatusConditionsItems0]


schema AdVaultUpboundIoV1alpha1SecretBackendStatusAtProvider:
    r"""
    ad vault upbound io v1alpha1 secret backend status at provider

    Attributes
    ----------
    anonymousGroupSearch : bool, default is Undefined, optional
        Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test). Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).
    backend : str, default is Undefined, optional
        The unique path this backend should be mounted at. Must not begin or end with a /. Defaults to ad. The mount path for a backend, for example, the path given in "$ vault auth enable -path=my-ad ad".
    binddn : str, default is Undefined, optional
        Distinguished name of object to bind when performing user and group search. Distinguished name of object to bind when performing user and group search.
    caseSensitiveNames : bool, default is Undefined, optional
        If set, user and group names assigned to policies within the backend will be case sensitive. Otherwise, names will be normalized to lower case. If true, case sensitivity will be used when comparing usernames and groups for matching policies.
    certificate : str, default is Undefined, optional
        CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded. CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
    defaultLeaseTtlSeconds : float, default is Undefined, optional
        Default lease duration for secrets in seconds. Default lease duration for secrets in seconds
    denyNullBind : bool, default is Undefined, optional
        Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true. Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true
    description : str, default is Undefined, optional
        Human-friendly description of the mount for the Active Directory backend. Human-friendly description of the mount for the backend.
    disableRemount : bool, default is Undefined, optional
        If set, opts out of mount migration on path updates. See here for more info on Mount Migration If set, opts out of mount migration on path updates.
    discoverdn : bool, default is Undefined, optional
        Use anonymous bind to discover the bind Distinguished Name of a user. Use anonymous bind to discover the bind DN of a user.
    formatter : str, default is Undefined, optional
        Deprecated use password_policy. Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix". Text to insert the password into, ex. "customPrefix{{PASSWORD}}customSuffix".
    groupattr : str, default is Undefined, optional
        LDAP attribute to follow on objects returned by  in order to enumerate user group membership. Examples: cn or memberOf, etc. Defaults to cn. LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: "cn" or "memberOf", etc. Default: cn
    groupdn : str, default is Undefined, optional
        LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org). LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)
    groupfilter : str, default is Undefined, optional
        Go template for querying group membership of user  The template can access the following context variables: UserDN, Username. Defaults to (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}})) Go template for querying group membership of user. The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
    id : str, default is Undefined, optional
        id
    insecureTls : bool, default is Undefined, optional
        Skip LDAP server SSL Certificate verification. This is not recommended for production. Defaults to false. Skip LDAP server SSL Certificate verification - insecure and not recommended for production use.
    lastRotationTolerance : float, default is Undefined, optional
        The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band The number of seconds after a Vault rotation where, if Active Directory shows a later rotation, it should be considered out-of-band.
    length : float, default is Undefined, optional
        Deprecated use password_policy. The desired length of passwords that Vault generates. Mutually exclusive with The desired length of passwords that Vault generates.
    local : bool, default is Undefined, optional
        Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time. Mark the secrets engine as local-only. Local engines are not replicated or removed by replication.Tolerance duration to use when checking the last rotation time.
    maxLeaseTtlSeconds : float, default is Undefined, optional
        Maximum possible lease duration for secrets in seconds. Maximum possible lease duration for secrets in seconds.
    maxTtl : float, default is Undefined, optional
        In seconds, the maximum password time-to-live. In seconds, the maximum password time-to-live.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    passwordPolicy : str, default is Undefined, optional
        1.11+ Name of the password policy to use to generate passwords.
    requestTimeout : float, default is Undefined, optional
        Timeout, in seconds, for the connection when making requests against the server before returning back an error. Timeout, in seconds, for the connection when making requests against the server before returning back an error.
    starttls : bool, default is Undefined, optional
        Issue a StartTLS command after establishing unencrypted connection. Issue a StartTLS command after establishing unencrypted connection.
    tlsMaxVersion : str, default is Undefined, optional
        Maximum TLS version to use. Accepted values are tls10, tls11, tls12 or tls13. Defaults to tls12. Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
    tlsMinVersion : str, default is Undefined, optional
        Minimum TLS version to use. Accepted values are tls10, tls11, tls12 or tls13. Defaults to tls12. Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'
    ttl : float, default is Undefined, optional
        In seconds, the default password time-to-live. In seconds, the default password time-to-live.
    upndomain : str, default is Undefined, optional
        Enables userPrincipalDomain login with [username]@UPNDomain. Enables userPrincipalDomain login with [username]@UPNDomain.
    url : str, default is Undefined, optional
        LDAP URL to connect to. Multiple URLs can be specified by concatenating them with commas; they will be tried in-order. Defaults to ldap://127.0.0.1. LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.
    usePre111GroupCnBehavior : bool, default is Undefined, optional
        In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations. In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations.
    useTokenGroups : bool, default is Undefined, optional
        If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones. If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.
    userattr : str, default is Undefined, optional
        Attribute used when searching users. Defaults to cn. Attribute used for users (default: cn)
    userdn : str, default is Undefined, optional
        LDAP domain to use for users (eg: ou=People,dc=example,dc=org)`. LDAP domain to use for users (eg: ou=People,dc=example,dc=org)
    """


    anonymousGroupSearch?: bool

    backend?: str

    binddn?: str

    caseSensitiveNames?: bool

    certificate?: str

    defaultLeaseTtlSeconds?: float

    denyNullBind?: bool

    description?: str

    disableRemount?: bool

    discoverdn?: bool

    formatter?: str

    groupattr?: str

    groupdn?: str

    groupfilter?: str

    id?: str

    insecureTls?: bool

    lastRotationTolerance?: float

    length?: float

    local?: bool

    maxLeaseTtlSeconds?: float

    maxTtl?: float

    namespace?: str

    passwordPolicy?: str

    requestTimeout?: float

    starttls?: bool

    tlsMaxVersion?: str

    tlsMinVersion?: str

    ttl?: float

    upndomain?: str

    url?: str

    usePre111GroupCnBehavior?: bool

    useTokenGroups?: bool

    userattr?: str

    userdn?: str


schema AdVaultUpboundIoV1alpha1SecretBackendStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


