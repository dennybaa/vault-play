"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema Endpoint:
    r"""
    Endpoint is the Schema for the Endpoints API. Writes arbitrary data to a given path in Vault

    Attributes
    ----------
    apiVersion : str, default is "generic.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Endpoint", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GenericVaultUpboundIoV1alpha1EndpointSpec, default is Undefined, required
        spec
    status : GenericVaultUpboundIoV1alpha1EndpointStatus, default is Undefined, optional
        status
    """


    apiVersion: "generic.vault.upbound.io/v1alpha1" = "generic.vault.upbound.io/v1alpha1"

    kind: "Endpoint" = "Endpoint"

    metadata?: v1.ObjectMeta

    spec: GenericVaultUpboundIoV1alpha1EndpointSpec

    status?: GenericVaultUpboundIoV1alpha1EndpointStatus


schema GenericVaultUpboundIoV1alpha1EndpointSpec:
    r"""
    EndpointSpec defines the desired state of Endpoint

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : GenericVaultUpboundIoV1alpha1EndpointSpecForProvider, default is Undefined, required
        for provider
    initProvider : GenericVaultUpboundIoV1alpha1EndpointSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : GenericVaultUpboundIoV1alpha1EndpointSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : GenericVaultUpboundIoV1alpha1EndpointSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : GenericVaultUpboundIoV1alpha1EndpointSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: GenericVaultUpboundIoV1alpha1EndpointSpecForProvider

    initProvider?: GenericVaultUpboundIoV1alpha1EndpointSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: GenericVaultUpboundIoV1alpha1EndpointSpecProviderConfigRef

    providerRef?: GenericVaultUpboundIoV1alpha1EndpointSpecProviderRef

    publishConnectionDetailsTo?: GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: GenericVaultUpboundIoV1alpha1EndpointSpecWriteConnectionSecretToRef


schema GenericVaultUpboundIoV1alpha1EndpointSpecForProvider:
    r"""
    generic vault upbound io v1alpha1 endpoint spec for provider

    Attributes
    ----------
    dataJsonSecretRef : GenericVaultUpboundIoV1alpha1EndpointSpecForProviderDataJSONSecretRef, default is Undefined, optional
        data Json secret ref
    disableDelete : bool, default is Undefined, optional
        True/false. Set this to true if your vault authentication is not able to delete the data or if the endpoint does not support the DELETE method. Defaults to false. Don't attempt to delete the path from Vault if true
    disableRead : bool, default is Undefined, optional
        True/false. Set this to true if your vault authentication is not able to read the data or if the endpoint does not support the GET method. Setting this to true will break drift detection. You should set this to true for endpoints that are write-only. Defaults to false. Don't attempt to read the path from Vault if true; drift won't be detected
    ignoreAbsentFields : bool, default is Undefined, optional
        True/false. If set to true, ignore any fields present when the endpoint is read but that were not in data_json. Also, if a field that was written is not returned when the endpoint is read, treat that field as being up to date. You should set this to true when writing to endpoint that, when read, returns a different set of fields from the ones you wrote, as is common with many configuration endpoints. Defaults to false. When reading, disregard fields not present in data_json
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    path : str, default is Undefined, optional
        The full logical path at which to write the given data. Consult each backend's documentation to see which endpoints support the PUT methods and to determine whether they also support DELETE and GET. Full path where to the endpoint that will be written
    writeFields : [str], default is Undefined, optional
        . A list of fields that should be returned in write_data_json and write_data. If omitted, data returned by the write operation is not available to the resource or included in state. This helps to avoid accidental storage of sensitive values in state. Some endpoints, such as many dynamic secrets endpoints, return data from writing to an endpoint rather than reading it. You should use write_fields if you need information returned in this way. Top-level fields returned by write to persist in state
    """


    dataJsonSecretRef?: GenericVaultUpboundIoV1alpha1EndpointSpecForProviderDataJSONSecretRef

    disableDelete?: bool

    disableRead?: bool

    ignoreAbsentFields?: bool

    namespace?: str

    path?: str

    writeFields?: [str]


schema GenericVaultUpboundIoV1alpha1EndpointSpecForProviderDataJSONSecretRef:
    r"""
    String containing a JSON-encoded object that will be written to the given path as the secret data. JSON-encoded data to write.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema GenericVaultUpboundIoV1alpha1EndpointSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    disableDelete : bool, default is Undefined, optional
        True/false. Set this to true if your vault authentication is not able to delete the data or if the endpoint does not support the DELETE method. Defaults to false. Don't attempt to delete the path from Vault if true
    disableRead : bool, default is Undefined, optional
        True/false. Set this to true if your vault authentication is not able to read the data or if the endpoint does not support the GET method. Setting this to true will break drift detection. You should set this to true for endpoints that are write-only. Defaults to false. Don't attempt to read the path from Vault if true; drift won't be detected
    ignoreAbsentFields : bool, default is Undefined, optional
        True/false. If set to true, ignore any fields present when the endpoint is read but that were not in data_json. Also, if a field that was written is not returned when the endpoint is read, treat that field as being up to date. You should set this to true when writing to endpoint that, when read, returns a different set of fields from the ones you wrote, as is common with many configuration endpoints. Defaults to false. When reading, disregard fields not present in data_json
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    path : str, default is Undefined, optional
        The full logical path at which to write the given data. Consult each backend's documentation to see which endpoints support the PUT methods and to determine whether they also support DELETE and GET. Full path where to the endpoint that will be written
    writeFields : [str], default is Undefined, optional
        . A list of fields that should be returned in write_data_json and write_data. If omitted, data returned by the write operation is not available to the resource or included in state. This helps to avoid accidental storage of sensitive values in state. Some endpoints, such as many dynamic secrets endpoints, return data from writing to an endpoint rather than reading it. You should use write_fields if you need information returned in this way. Top-level fields returned by write to persist in state
    """


    disableDelete?: bool

    disableRead?: bool

    ignoreAbsentFields?: bool

    namespace?: str

    path?: str

    writeFields?: [str]


schema GenericVaultUpboundIoV1alpha1EndpointSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : GenericVaultUpboundIoV1alpha1EndpointSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: GenericVaultUpboundIoV1alpha1EndpointSpecProviderConfigRefPolicy


schema GenericVaultUpboundIoV1alpha1EndpointSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema GenericVaultUpboundIoV1alpha1EndpointSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : GenericVaultUpboundIoV1alpha1EndpointSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: GenericVaultUpboundIoV1alpha1EndpointSpecProviderRefPolicy


schema GenericVaultUpboundIoV1alpha1EndpointSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToConfigRef

    metadata?: GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToMetadata

    name: str


schema GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToConfigRefPolicy


schema GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema GenericVaultUpboundIoV1alpha1EndpointSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema GenericVaultUpboundIoV1alpha1EndpointSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema GenericVaultUpboundIoV1alpha1EndpointStatus:
    r"""
    EndpointStatus defines the observed state of Endpoint.

    Attributes
    ----------
    atProvider : GenericVaultUpboundIoV1alpha1EndpointStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [GenericVaultUpboundIoV1alpha1EndpointStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: GenericVaultUpboundIoV1alpha1EndpointStatusAtProvider

    conditions?: [GenericVaultUpboundIoV1alpha1EndpointStatusConditionsItems0]


schema GenericVaultUpboundIoV1alpha1EndpointStatusAtProvider:
    r"""
    generic vault upbound io v1alpha1 endpoint status at provider

    Attributes
    ----------
    disableDelete : bool, default is Undefined, optional
        True/false. Set this to true if your vault authentication is not able to delete the data or if the endpoint does not support the DELETE method. Defaults to false. Don't attempt to delete the path from Vault if true
    disableRead : bool, default is Undefined, optional
        True/false. Set this to true if your vault authentication is not able to read the data or if the endpoint does not support the GET method. Setting this to true will break drift detection. You should set this to true for endpoints that are write-only. Defaults to false. Don't attempt to read the path from Vault if true; drift won't be detected
    id : str, default is Undefined, optional
        id
    ignoreAbsentFields : bool, default is Undefined, optional
        True/false. If set to true, ignore any fields present when the endpoint is read but that were not in data_json. Also, if a field that was written is not returned when the endpoint is read, treat that field as being up to date. You should set this to true when writing to endpoint that, when read, returns a different set of fields from the ones you wrote, as is common with many configuration endpoints. Defaults to false. When reading, disregard fields not present in data_json
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    path : str, default is Undefined, optional
        The full logical path at which to write the given data. Consult each backend's documentation to see which endpoints support the PUT methods and to determine whether they also support DELETE and GET. Full path where to the endpoint that will be written
    writeData : {str:str}, default is Undefined, optional
        A map whose keys are the top-level data keys returned from Vault by the write operation and whose values are the corresponding values. This map can only represent string data, so any non-string values returned from Vault are serialized as JSON. Only fields set in write_fields are present in the JSON data. Map of strings returned by write operation
    writeDataJson : str, default is Undefined, optional
        The JSON data returned by the write operation. Only fields set in write_fields are present in the JSON data. JSON data returned by write operation
    writeFields : [str], default is Undefined, optional
        . A list of fields that should be returned in write_data_json and write_data. If omitted, data returned by the write operation is not available to the resource or included in state. This helps to avoid accidental storage of sensitive values in state. Some endpoints, such as many dynamic secrets endpoints, return data from writing to an endpoint rather than reading it. You should use write_fields if you need information returned in this way. Top-level fields returned by write to persist in state
    """


    disableDelete?: bool

    disableRead?: bool

    id?: str

    ignoreAbsentFields?: bool

    namespace?: str

    path?: str

    writeData?: {str:str}

    writeDataJson?: str

    writeFields?: [str]


schema GenericVaultUpboundIoV1alpha1EndpointStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


