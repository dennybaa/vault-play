"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema SecretBackendRole:
    r"""
    SecretBackendRole is the Schema for the SecretBackendRoles API. Managing roles in an SSH secret backend in Vault

    Attributes
    ----------
    apiVersion : str, default is "ssh.vault.upbound.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "SecretBackendRole", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpec, default is Undefined, required
        spec
    status : SSHVaultUpboundIoV1alpha1SecretBackendRoleStatus, default is Undefined, optional
        status
    """


    apiVersion: "ssh.vault.upbound.io/v1alpha1" = "ssh.vault.upbound.io/v1alpha1"

    kind: "SecretBackendRole" = "SecretBackendRole"

    metadata?: v1.ObjectMeta

    spec: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpec

    status?: SSHVaultUpboundIoV1alpha1SecretBackendRoleStatus


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpec:
    r"""
    SecretBackendRoleSpec defines the desired state of SecretBackendRole

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated in favor of the ManagementPolicies field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecForProvider, default is Undefined, required
        for provider
    initProvider : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and external resources. This field is planned to replace the DeletionPolicy field in a future release. Currently, both could be set independently and non-default values would be honored if the feature flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223 and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderConfigRef, default is Undefined, optional
        provider config ref
    providerRef : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderRef, default is Undefined, optional
        provider ref
    publishConnectionDetailsTo : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecForProvider

    initProvider?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderConfigRef

    providerRef?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderRef

    publishConnectionDetailsTo?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecWriteConnectionSecretToRef


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecForProvider:
    r"""
    SSH vault upbound io v1alpha1 secret backend role spec for provider

    Attributes
    ----------
    algorithmSigner : str, default is Undefined, optional
        When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
    allowBareDomains : bool, default is Undefined, optional
        Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.
    allowHostCertificates : bool, default is Undefined, optional
        Specifies if certificates are allowed to be signed for use as a 'host'.
    allowSubdomains : bool, default is Undefined, optional
        Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.
    allowUserCertificates : bool, default is Undefined, optional
        Specifies if certificates are allowed to be signed for use as a 'user'.
    allowUserKeyIds : bool, default is Undefined, optional
        Specifies if users can override the key ID for a signed certificate with the key_id field.
    allowedCriticalOptions : str, default is Undefined, optional
        Specifies a comma-separated list of critical options that certificates can have when signed.
    allowedDomains : str, default is Undefined, optional
        The list of domains for which a client can request a host certificate.
    allowedDomainsTemplate : bool, default is Undefined, optional
        Specifies if allowed_domains can be declared using identity template policies. Non-templated domains are also permitted.
    allowedExtensions : str, default is Undefined, optional
        Specifies a comma-separated list of extensions that certificates can have when signed.
    allowedUserKeyConfig : [SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecForProviderAllowedUserKeyConfigItems0], default is Undefined, optional
        Set of configuration blocks to define allowed user key configuration, like key type and their lengths. Can be specified multiple times. See Set of allowed public key types and their relevant configuration
    allowedUserKeyLengths : {str:float}, default is Undefined, optional
        Specifies a map of ssh key types and their expected sizes which are allowed to be signed by the CA type. Deprecated: use allowed_user_key_config instead
    allowedUsers : str, default is Undefined, optional
        Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
    allowedUsersTemplate : bool, default is Undefined, optional
        Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.
    backend : str, default is Undefined, optional
        The path where the SSH secret backend is mounted.
    cidrList : str, default is Undefined, optional
        The comma-separated string of CIDR blocks for which this role is applicable.
    defaultCriticalOptions : {str:str}, default is Undefined, optional
        Specifies a map of critical options that certificates have when signed.
    defaultExtensions : {str:str}, default is Undefined, optional
        Specifies a map of extensions that certificates have when signed.
    defaultUser : str, default is Undefined, optional
        Specifies the default username for which a credential will be generated.
    defaultUserTemplate : bool, default is Undefined, optional
        If set, default_users can be specified using identity template values. A non-templated user is also permitted.
    keyIdFormat : str, default is Undefined, optional
        Specifies a custom format for the key id of a signed certificate.
    keyType : str, default is Undefined, optional
        Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.
    maxTtl : str, default is Undefined, optional
        Specifies the maximum Time To Live value.
    name : str, default is Undefined, optional
        Specifies the name of the role to create. Unique name for the role.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    notBeforeDuration : str, default is Undefined, optional
        Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings. Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
    ttl : str, default is Undefined, optional
        Specifies the Time To Live value.
    """


    algorithmSigner?: str

    allowBareDomains?: bool

    allowHostCertificates?: bool

    allowSubdomains?: bool

    allowUserCertificates?: bool

    allowUserKeyIds?: bool

    allowedCriticalOptions?: str

    allowedDomains?: str

    allowedDomainsTemplate?: bool

    allowedExtensions?: str

    allowedUserKeyConfig?: [SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecForProviderAllowedUserKeyConfigItems0]

    allowedUserKeyLengths?: {str:float}

    allowedUsers?: str

    allowedUsersTemplate?: bool

    backend?: str

    cidrList?: str

    defaultCriticalOptions?: {str:str}

    defaultExtensions?: {str:str}

    defaultUser?: str

    defaultUserTemplate?: bool

    keyIdFormat?: str

    keyType?: str

    maxTtl?: str

    name?: str

    namespace?: str

    notBeforeDuration?: str

    ttl?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecForProviderAllowedUserKeyConfigItems0:
    r"""
    SSH vault upbound io v1alpha1 secret backend role spec for provider allowed user key config items0

    Attributes
    ----------
    lengths : [float], default is Undefined, optional
        A list of allowed key lengths as integers. For key types that do not support setting the length a value of [0] should be used. Setting multiple lengths is only supported on Vault 1.10+. For prior releases length must be set to a single element list. List of allowed key lengths, vault-1.10 and above
    $type : str, default is Undefined, optional
        The SSH public key type. Supported key types are: rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521 Key type, choices: rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
    """


    lengths?: [float]

    $type?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecInitProvider:
    r"""
    THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless the relevant Crossplane feature flag is enabled, and may be changed or removed without notice. InitProvider holds the same fields as ForProvider, with the exception of Identifier and other resource reference fields. The fields that are in InitProvider are merged into ForProvider when the resource is created. The same fields are also added to the terraform ignore_changes hook, to avoid updating them after creation. This is useful for fields that are required on creation, but we do not desire to update them after creation, for example because of an external controller is managing them, like an autoscaler.

    Attributes
    ----------
    algorithmSigner : str, default is Undefined, optional
        When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
    allowBareDomains : bool, default is Undefined, optional
        Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.
    allowHostCertificates : bool, default is Undefined, optional
        Specifies if certificates are allowed to be signed for use as a 'host'.
    allowSubdomains : bool, default is Undefined, optional
        Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.
    allowUserCertificates : bool, default is Undefined, optional
        Specifies if certificates are allowed to be signed for use as a 'user'.
    allowUserKeyIds : bool, default is Undefined, optional
        Specifies if users can override the key ID for a signed certificate with the key_id field.
    allowedCriticalOptions : str, default is Undefined, optional
        Specifies a comma-separated list of critical options that certificates can have when signed.
    allowedDomains : str, default is Undefined, optional
        The list of domains for which a client can request a host certificate.
    allowedDomainsTemplate : bool, default is Undefined, optional
        Specifies if allowed_domains can be declared using identity template policies. Non-templated domains are also permitted.
    allowedExtensions : str, default is Undefined, optional
        Specifies a comma-separated list of extensions that certificates can have when signed.
    allowedUserKeyConfig : [SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecInitProviderAllowedUserKeyConfigItems0], default is Undefined, optional
        Set of configuration blocks to define allowed user key configuration, like key type and their lengths. Can be specified multiple times. See Set of allowed public key types and their relevant configuration
    allowedUserKeyLengths : {str:float}, default is Undefined, optional
        Specifies a map of ssh key types and their expected sizes which are allowed to be signed by the CA type. Deprecated: use allowed_user_key_config instead
    allowedUsers : str, default is Undefined, optional
        Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
    allowedUsersTemplate : bool, default is Undefined, optional
        Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.
    backend : str, default is Undefined, optional
        The path where the SSH secret backend is mounted.
    cidrList : str, default is Undefined, optional
        The comma-separated string of CIDR blocks for which this role is applicable.
    defaultCriticalOptions : {str:str}, default is Undefined, optional
        Specifies a map of critical options that certificates have when signed.
    defaultExtensions : {str:str}, default is Undefined, optional
        Specifies a map of extensions that certificates have when signed.
    defaultUser : str, default is Undefined, optional
        Specifies the default username for which a credential will be generated.
    defaultUserTemplate : bool, default is Undefined, optional
        If set, default_users can be specified using identity template values. A non-templated user is also permitted.
    keyIdFormat : str, default is Undefined, optional
        Specifies a custom format for the key id of a signed certificate.
    keyType : str, default is Undefined, optional
        Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.
    maxTtl : str, default is Undefined, optional
        Specifies the maximum Time To Live value.
    name : str, default is Undefined, optional
        Specifies the name of the role to create. Unique name for the role.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    notBeforeDuration : str, default is Undefined, optional
        Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings. Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
    ttl : str, default is Undefined, optional
        Specifies the Time To Live value.
    """


    algorithmSigner?: str

    allowBareDomains?: bool

    allowHostCertificates?: bool

    allowSubdomains?: bool

    allowUserCertificates?: bool

    allowUserKeyIds?: bool

    allowedCriticalOptions?: str

    allowedDomains?: str

    allowedDomainsTemplate?: bool

    allowedExtensions?: str

    allowedUserKeyConfig?: [SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecInitProviderAllowedUserKeyConfigItems0]

    allowedUserKeyLengths?: {str:float}

    allowedUsers?: str

    allowedUsersTemplate?: bool

    backend?: str

    cidrList?: str

    defaultCriticalOptions?: {str:str}

    defaultExtensions?: {str:str}

    defaultUser?: str

    defaultUserTemplate?: bool

    keyIdFormat?: str

    keyType?: str

    maxTtl?: str

    name?: str

    namespace?: str

    notBeforeDuration?: str

    ttl?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecInitProviderAllowedUserKeyConfigItems0:
    r"""
    SSH vault upbound io v1alpha1 secret backend role spec init provider allowed user key config items0

    Attributes
    ----------
    lengths : [float], default is Undefined, optional
        A list of allowed key lengths as integers. For key types that do not support setting the length a value of [0] should be used. Setting multiple lengths is only supported on Vault 1.10+. For prior releases length must be set to a single element list. List of allowed key lengths, vault-1.10 and above
    $type : str, default is Undefined, optional
        The SSH public key type. Supported key types are: rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521 Key type, choices: rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
    """


    lengths?: [float]

    $type?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderConfigRefPolicy


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderRef:
    r"""
    ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderRefPolicy


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecProviderRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToConfigRef

    metadata?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToMetadata

    name: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.annotations". - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as "metadata.labels". - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleSpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleStatus:
    r"""
    SecretBackendRoleStatus defines the observed state of SecretBackendRole.

    Attributes
    ----------
    atProvider : SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusAtProvider, default is Undefined, optional
        at provider
    conditions : [SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    """


    atProvider?: SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusAtProvider

    conditions?: [SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusConditionsItems0]


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusAtProvider:
    r"""
    SSH vault upbound io v1alpha1 secret backend role status at provider

    Attributes
    ----------
    algorithmSigner : str, default is Undefined, optional
        When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512.
    allowBareDomains : bool, default is Undefined, optional
        Specifies if host certificates that are requested are allowed to use the base domains listed in allowed_domains.
    allowHostCertificates : bool, default is Undefined, optional
        Specifies if certificates are allowed to be signed for use as a 'host'.
    allowSubdomains : bool, default is Undefined, optional
        Specifies if host certificates that are requested are allowed to be subdomains of those listed in allowed_domains.
    allowUserCertificates : bool, default is Undefined, optional
        Specifies if certificates are allowed to be signed for use as a 'user'.
    allowUserKeyIds : bool, default is Undefined, optional
        Specifies if users can override the key ID for a signed certificate with the key_id field.
    allowedCriticalOptions : str, default is Undefined, optional
        Specifies a comma-separated list of critical options that certificates can have when signed.
    allowedDomains : str, default is Undefined, optional
        The list of domains for which a client can request a host certificate.
    allowedDomainsTemplate : bool, default is Undefined, optional
        Specifies if allowed_domains can be declared using identity template policies. Non-templated domains are also permitted.
    allowedExtensions : str, default is Undefined, optional
        Specifies a comma-separated list of extensions that certificates can have when signed.
    allowedUserKeyConfig : [SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusAtProviderAllowedUserKeyConfigItems0], default is Undefined, optional
        Set of configuration blocks to define allowed user key configuration, like key type and their lengths. Can be specified multiple times. See Set of allowed public key types and their relevant configuration
    allowedUserKeyLengths : {str:float}, default is Undefined, optional
        Specifies a map of ssh key types and their expected sizes which are allowed to be signed by the CA type. Deprecated: use allowed_user_key_config instead
    allowedUsers : str, default is Undefined, optional
        Specifies a comma-separated list of usernames that are to be allowed, only if certain usernames are to be allowed.
    allowedUsersTemplate : bool, default is Undefined, optional
        Specifies if allowed_users can be declared using identity template policies. Non-templated users are also permitted.
    backend : str, default is Undefined, optional
        The path where the SSH secret backend is mounted.
    cidrList : str, default is Undefined, optional
        The comma-separated string of CIDR blocks for which this role is applicable.
    defaultCriticalOptions : {str:str}, default is Undefined, optional
        Specifies a map of critical options that certificates have when signed.
    defaultExtensions : {str:str}, default is Undefined, optional
        Specifies a map of extensions that certificates have when signed.
    defaultUser : str, default is Undefined, optional
        Specifies the default username for which a credential will be generated.
    defaultUserTemplate : bool, default is Undefined, optional
        If set, default_users can be specified using identity template values. A non-templated user is also permitted.
    id : str, default is Undefined, optional
        id
    keyIdFormat : str, default is Undefined, optional
        Specifies a custom format for the key id of a signed certificate.
    keyType : str, default is Undefined, optional
        Specifies the type of credentials generated by this role. This can be either otp, dynamic or ca.
    maxTtl : str, default is Undefined, optional
        Specifies the maximum Time To Live value.
    name : str, default is Undefined, optional
        Specifies the name of the role to create. Unique name for the role.
    namespace : str, default is Undefined, optional
        The namespace to provision the resource in. The value should not contain leading or trailing forward slashes. The namespace is always relative to the provider's configured namespace. Available only for Vault Enterprise. Target namespace. (requires Enterprise)
    notBeforeDuration : str, default is Undefined, optional
        Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings. Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
    ttl : str, default is Undefined, optional
        Specifies the Time To Live value.
    """


    algorithmSigner?: str

    allowBareDomains?: bool

    allowHostCertificates?: bool

    allowSubdomains?: bool

    allowUserCertificates?: bool

    allowUserKeyIds?: bool

    allowedCriticalOptions?: str

    allowedDomains?: str

    allowedDomainsTemplate?: bool

    allowedExtensions?: str

    allowedUserKeyConfig?: [SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusAtProviderAllowedUserKeyConfigItems0]

    allowedUserKeyLengths?: {str:float}

    allowedUsers?: str

    allowedUsersTemplate?: bool

    backend?: str

    cidrList?: str

    defaultCriticalOptions?: {str:str}

    defaultExtensions?: {str:str}

    defaultUser?: str

    defaultUserTemplate?: bool

    id?: str

    keyIdFormat?: str

    keyType?: str

    maxTtl?: str

    name?: str

    namespace?: str

    notBeforeDuration?: str

    ttl?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusAtProviderAllowedUserKeyConfigItems0:
    r"""
    SSH vault upbound io v1alpha1 secret backend role status at provider allowed user key config items0

    Attributes
    ----------
    lengths : [float], default is Undefined, optional
        A list of allowed key lengths as integers. For key types that do not support setting the length a value of [0] should be used. Setting multiple lengths is only supported on Vault 1.10+. For prior releases length must be set to a single element list. List of allowed key lengths, vault-1.10 and above
    $type : str, default is Undefined, optional
        The SSH public key type. Supported key types are: rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521 Key type, choices: rsa, ecdsa, ec, dsa, ed25519, ssh-rsa, ssh-dss, ssh-ed25519, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521
    """


    lengths?: [float]

    $type?: str


schema SSHVaultUpboundIoV1alpha1SecretBackendRoleStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


