"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ProviderConfig:
    r"""
    A ProviderConfig configures a Vault provider.

    Attributes
    ----------
    apiVersion : str, default is "vault.upbound.io/v1beta1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ProviderConfig", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : VaultUpboundIoV1beta1ProviderConfigSpec, default is Undefined, required
        spec
    status : VaultUpboundIoV1beta1ProviderConfigStatus, default is Undefined, optional
        status
    """


    apiVersion: "vault.upbound.io/v1beta1" = "vault.upbound.io/v1beta1"

    kind: "ProviderConfig" = "ProviderConfig"

    metadata?: v1.ObjectMeta

    spec: VaultUpboundIoV1beta1ProviderConfigSpec

    status?: VaultUpboundIoV1beta1ProviderConfigStatus


schema VaultUpboundIoV1beta1ProviderConfigSpec:
    r"""
    A ProviderConfigSpec defines the desired state of a ProviderConfig.

    Attributes
    ----------
    add_address_to_env : bool, default is Undefined, optional
        If true the environment variable VAULT_ADDR in the Terraform process environment will be set to the value of the address argument from this provider. By default, this is false.
    address : str, default is Undefined, required
        Required origin URL of the Vault server. This is a URL with a scheme, a hostname and a port but with no path.
    credentials : VaultUpboundIoV1beta1ProviderConfigSpecCredentials, default is Undefined, optional
        credentials
    headers : VaultUpboundIoV1beta1ProviderConfigSpecHeaders, default is Undefined, optional
        headers
    max_lease_ttl_seconds : int, default is Undefined, optional
        Used as the duration for the intermediate Vault token Terraform issues itself, which in turn limits the duration of secret leases issued by Vault. Defaults to 20 minutes.
    max_retries : int, default is Undefined, optional
        Used as the maximum number of retries when a 5xx error code is encountered. Defaults to 2 retries.
    max_retries_ccc : int, default is Undefined, optional
        Maximum number of retries for Client Controlled Consistency related operations. Defaults to 10 retries.
    namespace : str, default is Undefined, optional
        Set the namespace to use.
    skip_child_token : bool, default is Undefined, optional
        Set this to true to disable creation of an intermediate ephemeral Vault token for Terraform to use. Enabling this is strongly discouraged since it increases the potential for a renewable Vault token being exposed in clear text. Only change this setting when the provided token cannot be permitted to create child tokens and there is no risk of exposure from the output of Terraform.
    skip_get_vault_version : bool, default is Undefined, optional
        Skip the dynamic fetching of the Vault server version. Set to true when the /sys/seal-status API endpoint is not available.
    skip_tls_verify : bool, default is Undefined, optional
        Set this to true to disable verification of the Vault server's TLS certificate. This is strongly discouraged except in prototype or development environments, since it exposes the possibility that Terraform can be tricked into writing secrets to a server controlled by an intruder.
    tls_server_name : str, default is Undefined, optional
        Name to use as the SNI host when connecting via TLS.
    vault_version_override : str, default is Undefined, optional
        Override the target Vault server semantic version. Normally the version is dynamically set from the /sys/seal-status API endpoint. In the case where this endpoint is not available an override can be specified here.
    """


    add_address_to_env?: bool

    address: str

    credentials?: VaultUpboundIoV1beta1ProviderConfigSpecCredentials

    headers?: VaultUpboundIoV1beta1ProviderConfigSpecHeaders

    max_lease_ttl_seconds?: int

    max_retries?: int

    max_retries_ccc?: int

    namespace?: str

    skip_child_token?: bool

    skip_get_vault_version?: bool

    skip_tls_verify?: bool

    tls_server_name?: str

    vault_version_override?: str


schema VaultUpboundIoV1beta1ProviderConfigSpecCredentials:
    r"""
    Credentials required to authenticate to this provider. There are many options to authenticate. They include - token - (Optional) Vault token that will be used by Terraform to authenticate. May be set via the VAULT_TOKEN environment variable. If none is otherwise supplied, Terraform will attempt to read it from ~/.vault-token (where the vault command stores its current token). Terraform will issue itself a new token that is a child of the one given, with a short TTL to limit the exposure of any requested secrets, unless skip_child_token is set to true (see below). Note that the given token must have the update capability on the auth/token/create path in Vault in order to create child tokens. A token is required for the provider. A token can explicitly set via token argument, alternatively a token can be dynamically set via an auth_login* block.

    Attributes
    ----------
    env : VaultUpboundIoV1beta1ProviderConfigSpecCredentialsEnv, default is Undefined, optional
        env
    fs : VaultUpboundIoV1beta1ProviderConfigSpecCredentialsFs, default is Undefined, optional
        fs
    secretRef : VaultUpboundIoV1beta1ProviderConfigSpecCredentialsSecretRef, default is Undefined, optional
        secret ref
    source : str, default is Undefined, required
        Source of the provider credentials.
    """


    env?: VaultUpboundIoV1beta1ProviderConfigSpecCredentialsEnv

    fs?: VaultUpboundIoV1beta1ProviderConfigSpecCredentialsFs

    secretRef?: VaultUpboundIoV1beta1ProviderConfigSpecCredentialsSecretRef

    source: "None" | "Secret" | "InjectedIdentity" | "Environment" | "Filesystem"


schema VaultUpboundIoV1beta1ProviderConfigSpecCredentialsEnv:
    r"""
    Env is a reference to an environment variable that contains credentials that must be used to connect to the provider.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of an environment variable.
    """


    name: str


schema VaultUpboundIoV1beta1ProviderConfigSpecCredentialsFs:
    r"""
    Fs is a reference to a filesystem location that contains credentials that must be used to connect to the provider.

    Attributes
    ----------
    path : str, default is Undefined, required
        Path is a filesystem path.
    """


    path: str


schema VaultUpboundIoV1beta1ProviderConfigSpecCredentialsSecretRef:
    r"""
    A SecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    key: str

    name: str

    namespace: str


schema VaultUpboundIoV1beta1ProviderConfigSpecHeaders:
    r"""
    A configuration block, described below, that provides headers to be sent along with all requests to the Vault server. This block can be specified multiple times.

    Attributes
    ----------
    name : str, default is Undefined, required
        Required header name
    value : str, default is Undefined, required
        Required header value
    """


    name: str

    value: str


schema VaultUpboundIoV1beta1ProviderConfigStatus:
    r"""
    A ProviderConfigStatus reflects the observed state of a ProviderConfig.

    Attributes
    ----------
    conditions : [VaultUpboundIoV1beta1ProviderConfigStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    users : int, default is Undefined, optional
        Users of this provider configuration.
    """


    conditions?: [VaultUpboundIoV1beta1ProviderConfigStatusConditionsItems0]

    users?: int


schema VaultUpboundIoV1beta1ProviderConfigStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from one status to another, if any.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    reason: str

    status: str

    $type: str


